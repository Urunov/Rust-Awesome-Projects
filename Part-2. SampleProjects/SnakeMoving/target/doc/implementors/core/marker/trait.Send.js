(function() {var implementors = {};
implementors["ab_glyph_rasterizer"] = [{"text":"impl Send for Point","synthetic":true,"types":[]},{"text":"impl Send for Rasterizer","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Send for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Send for RollingAdler32","synthetic":true,"types":[]}];
implementors["block"] = [{"text":"impl&lt;A, R&gt; !Send for Block&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R&gt; !Send for RcBlock&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R, F&gt; !Send for ConcreteBlock&lt;A, R, F&gt;","synthetic":true,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Send for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["cocoa"] = [{"text":"impl Send for NSApplicationPresentationOptions","synthetic":true,"types":[]},{"text":"impl Send for NSWindowStyleMask","synthetic":true,"types":[]},{"text":"impl Send for NSWindowOrderingMode","synthetic":true,"types":[]},{"text":"impl Send for NSAlignmentOptions","synthetic":true,"types":[]},{"text":"impl Send for NSWindowCollectionBehavior","synthetic":true,"types":[]},{"text":"impl Send for NSWindowOcclusionState","synthetic":true,"types":[]},{"text":"impl Send for NSEventSwipeTrackingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSEventPhase","synthetic":true,"types":[]},{"text":"impl Send for NSTouchPhase","synthetic":true,"types":[]},{"text":"impl Send for NSEventMask","synthetic":true,"types":[]},{"text":"impl Send for NSEventModifierFlags","synthetic":true,"types":[]},{"text":"impl Send for NSApplicationActivationPolicy","synthetic":true,"types":[]},{"text":"impl Send for NSApplicationActivationOptions","synthetic":true,"types":[]},{"text":"impl Send for NSApplicationTerminateReply","synthetic":true,"types":[]},{"text":"impl Send for NSWindowTitleVisibility","synthetic":true,"types":[]},{"text":"impl Send for NSBackingStoreType","synthetic":true,"types":[]},{"text":"impl Send for NSOpenGLPixelFormatAttribute","synthetic":true,"types":[]},{"text":"impl Send for NSOpenGLPFAOpenGLProfiles","synthetic":true,"types":[]},{"text":"impl Send for NSOpenGLContextParameter","synthetic":true,"types":[]},{"text":"impl Send for NSWindowButton","synthetic":true,"types":[]},{"text":"impl Send for NSBezelStyle","synthetic":true,"types":[]},{"text":"impl Send for NSRequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl Send for NSPasteboardReadingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSPasteboardWritingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSEventGestureAxis","synthetic":true,"types":[]},{"text":"impl Send for NSEventType","synthetic":true,"types":[]},{"text":"impl Send for NSPointingDeviceType","synthetic":true,"types":[]},{"text":"impl Send for NSEventButtonMask","synthetic":true,"types":[]},{"text":"impl Send for NSEventSubtype","synthetic":true,"types":[]},{"text":"impl Send for NSCompositingOperation","synthetic":true,"types":[]},{"text":"impl Send for NSImageCacheMode","synthetic":true,"types":[]},{"text":"impl Send for NSTIFFCompression","synthetic":true,"types":[]},{"text":"impl Send for NSImageLoadStatus","synthetic":true,"types":[]},{"text":"impl Send for NSTabViewType","synthetic":true,"types":[]},{"text":"impl Send for NSTabState","synthetic":true,"types":[]},{"text":"impl Send for NSPoint","synthetic":true,"types":[]},{"text":"impl Send for NSSize","synthetic":true,"types":[]},{"text":"impl Send for NSRect","synthetic":true,"types":[]},{"text":"impl Send for NSRange","synthetic":true,"types":[]},{"text":"impl Send for NSEnumerationOptions","synthetic":true,"types":[]},{"text":"impl !Send for NSFastIterator","synthetic":true,"types":[]},{"text":"impl Send for NSDataReadingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSDataBase64EncodingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSDataBase64DecodingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSDataWritingOptions","synthetic":true,"types":[]},{"text":"impl Send for NSDataSearchOptions","synthetic":true,"types":[]},{"text":"impl Send for NSRectEdge","synthetic":true,"types":[]},{"text":"impl Send for NSComparisonResult","synthetic":true,"types":[]},{"text":"impl Send for EdgeAntialiasingMask","synthetic":true,"types":[]},{"text":"impl Send for CornerMask","synthetic":true,"types":[]},{"text":"impl Send for AutoresizingMask","synthetic":true,"types":[]},{"text":"impl Send for CATransform3D","synthetic":true,"types":[]},{"text":"impl Send for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl Send for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl !Send for ContentsGravity","synthetic":true,"types":[]},{"text":"impl !Send for ContentsFormat","synthetic":true,"types":[]},{"text":"impl !Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for CALayer","synthetic":false,"types":[]},{"text":"impl Send for CARenderer","synthetic":false,"types":[]}];
implementors["color_quant"] = [{"text":"impl Send for NeuQuant","synthetic":true,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;T&nbsp;=&nbsp;*const c_void&gt; !Send for CFArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for CFArrayIterator&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for CFAttributedString","synthetic":true,"types":[]},{"text":"impl !Send for CFMutableAttributedString","synthetic":true,"types":[]},{"text":"impl !Send for CFType","synthetic":true,"types":[]},{"text":"impl !Send for CFAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ItemRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ItemMutRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for CFBoolean","synthetic":true,"types":[]},{"text":"impl !Send for CFData","synthetic":true,"types":[]},{"text":"impl !Send for CFDate","synthetic":true,"types":[]},{"text":"impl&lt;K&nbsp;=&nbsp;*const c_void, V&nbsp;=&nbsp;*const c_void&gt; !Send for CFDictionary&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&nbsp;=&nbsp;*const c_void, V&nbsp;=&nbsp;*const c_void&gt; !Send for CFMutableDictionary&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl !Send for CFError","synthetic":true,"types":[]},{"text":"impl !Send for CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl !Send for CFNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;*const c_void&gt; !Send for CFSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for CFString","synthetic":true,"types":[]},{"text":"impl !Send for CFURL","synthetic":true,"types":[]},{"text":"impl !Send for CFBundle","synthetic":true,"types":[]},{"text":"impl !Send for CFPropertyList","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoop","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl !Send for CFTimeZone","synthetic":true,"types":[]},{"text":"impl !Send for CFUUID","synthetic":true,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl Send for CFArrayCallBacks","synthetic":true,"types":[]},{"text":"impl Send for __CFArray","synthetic":true,"types":[]},{"text":"impl Send for __CFAttributedString","synthetic":true,"types":[]},{"text":"impl Send for CFRange","synthetic":true,"types":[]},{"text":"impl !Send for CFAllocatorContext","synthetic":true,"types":[]},{"text":"impl Send for CFComparisonResult","synthetic":true,"types":[]},{"text":"impl Send for __CFBundle","synthetic":true,"types":[]},{"text":"impl Send for __CFData","synthetic":true,"types":[]},{"text":"impl Send for __CFDate","synthetic":true,"types":[]},{"text":"impl Send for CFDictionaryKeyCallBacks","synthetic":true,"types":[]},{"text":"impl Send for CFDictionaryValueCallBacks","synthetic":true,"types":[]},{"text":"impl Send for __CFDictionary","synthetic":true,"types":[]},{"text":"impl Send for __CFError","synthetic":true,"types":[]},{"text":"impl Send for __CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl !Send for CFFileDescriptorContext","synthetic":true,"types":[]},{"text":"impl !Send for CFMessagePortContext","synthetic":true,"types":[]},{"text":"impl Send for __CFMessagePort","synthetic":true,"types":[]},{"text":"impl Send for __CFBoolean","synthetic":true,"types":[]},{"text":"impl Send for __CFNumber","synthetic":true,"types":[]},{"text":"impl Send for __CFRunLoop","synthetic":true,"types":[]},{"text":"impl Send for __CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl Send for __CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopSourceContext","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopSourceContext1","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopObserverContext","synthetic":true,"types":[]},{"text":"impl !Send for CFRunLoopTimerContext","synthetic":true,"types":[]},{"text":"impl Send for __CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl !Send for CFSetCallBacks","synthetic":true,"types":[]},{"text":"impl Send for __CFSet","synthetic":true,"types":[]},{"text":"impl Send for __CFString","synthetic":true,"types":[]},{"text":"impl Send for __CFTimeZone","synthetic":true,"types":[]},{"text":"impl Send for __CFURL","synthetic":true,"types":[]},{"text":"impl Send for __CFUUID","synthetic":true,"types":[]},{"text":"impl Send for CFUUIDBytes","synthetic":true,"types":[]}];
implementors["core_graphics"] = [{"text":"impl !Send for CGColor","synthetic":true,"types":[]},{"text":"impl !Send for CGColorSpace","synthetic":true,"types":[]},{"text":"impl Send for CGColorSpaceRef","synthetic":true,"types":[]},{"text":"impl !Send for CGContext","synthetic":true,"types":[]},{"text":"impl Send for CGContextRef","synthetic":true,"types":[]},{"text":"impl Send for CGBlendMode","synthetic":true,"types":[]},{"text":"impl Send for CGTextDrawingMode","synthetic":true,"types":[]},{"text":"impl !Send for CGDataProvider","synthetic":true,"types":[]},{"text":"impl Send for CGDataProviderRef","synthetic":true,"types":[]},{"text":"impl Send for CGDisplay","synthetic":true,"types":[]},{"text":"impl !Send for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl Send for CGDisplayModeRef","synthetic":true,"types":[]},{"text":"impl Send for CGConfigureOption","synthetic":true,"types":[]},{"text":"impl Send for CGEventFlags","synthetic":true,"types":[]},{"text":"impl Send for KeyCode","synthetic":true,"types":[]},{"text":"impl Send for ScrollEventUnit","synthetic":true,"types":[]},{"text":"impl Send for EventField","synthetic":true,"types":[]},{"text":"impl !Send for CGEvent","synthetic":true,"types":[]},{"text":"impl Send for CGEventRef","synthetic":true,"types":[]},{"text":"impl Send for CGEventType","synthetic":true,"types":[]},{"text":"impl Send for CGMouseButton","synthetic":true,"types":[]},{"text":"impl Send for CGEventTapLocation","synthetic":true,"types":[]},{"text":"impl !Send for CGEventSource","synthetic":true,"types":[]},{"text":"impl Send for CGEventSourceRef","synthetic":true,"types":[]},{"text":"impl Send for CGEventSourceStateID","synthetic":true,"types":[]},{"text":"impl Send for CGFontRef","synthetic":true,"types":[]},{"text":"impl Send for CGSize","synthetic":true,"types":[]},{"text":"impl Send for CGPoint","synthetic":true,"types":[]},{"text":"impl Send for CGRect","synthetic":true,"types":[]},{"text":"impl Send for CGAffineTransform","synthetic":true,"types":[]},{"text":"impl !Send for CGSRegion","synthetic":true,"types":[]},{"text":"impl Send for CGSSurface","synthetic":true,"types":[]},{"text":"impl !Send for CGImage","synthetic":true,"types":[]},{"text":"impl Send for CGImageRef","synthetic":true,"types":[]},{"text":"impl Send for CGImageAlphaInfo","synthetic":true,"types":[]},{"text":"impl Send for CGImageByteOrderInfo","synthetic":true,"types":[]},{"text":"impl !Send for CGPath","synthetic":true,"types":[]},{"text":"impl Send for CGPathRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CGPathElementRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for CGPathElement","synthetic":true,"types":[]},{"text":"impl Send for CGPathElementType","synthetic":true,"types":[]},{"text":"impl Send for CGFont","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Send for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable + Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Send for ScopedJoinHandle&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Send for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Send for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["event_loop"] = [{"text":"impl Send for EventSettings","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl Send for Opaque","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl Send for AnyExtension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Send for DecodingFormatError","synthetic":true,"types":[]},{"text":"impl Send for MemoryLimit","synthetic":true,"types":[]},{"text":"impl Send for DecodeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for Extension","synthetic":true,"types":[]},{"text":"impl Send for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for ColorOutput","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl Send for ExtensionData","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for EncodingError","synthetic":true,"types":[]}];
implementors["gl"] = [{"text":"impl !Send for FnPtr","synthetic":true,"types":[]},{"text":"impl Send for __GLsync","synthetic":true,"types":[]},{"text":"impl Send for _cl_context","synthetic":true,"types":[]},{"text":"impl Send for _cl_event","synthetic":true,"types":[]}];
implementors["gleam"] = [{"text":"impl !Send for FnPtr","synthetic":true,"types":[]},{"text":"impl Send for DebugMessage","synthetic":true,"types":[]},{"text":"impl !Send for ErrorCheckingGl","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Send for ErrorReactingGl&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Send for ProfilingGl&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Send for GlFns","synthetic":true,"types":[]},{"text":"impl Send for GlesFns","synthetic":true,"types":[]},{"text":"impl Send for __GLsync","synthetic":true,"types":[]},{"text":"impl Send for _cl_context","synthetic":true,"types":[]},{"text":"impl Send for _cl_event","synthetic":true,"types":[]},{"text":"impl Send for GlType","synthetic":true,"types":[]},{"text":"impl Send for Gl","synthetic":false,"types":[]},{"text":"impl Send for Gles2","synthetic":false,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T&gt; Send for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; Send for ContextWrapper&lt;T, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ContextBuilder&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PixelFormat","synthetic":true,"types":[]},{"text":"impl Send for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NotCurrent","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for ContextError","synthetic":true,"types":[]},{"text":"impl Send for Api","synthetic":true,"types":[]},{"text":"impl Send for GlProfile","synthetic":true,"types":[]},{"text":"impl Send for GlRequest","synthetic":true,"types":[]},{"text":"impl Send for Robustness","synthetic":true,"types":[]},{"text":"impl Send for ReleaseBehavior","synthetic":true,"types":[]}];
implementors["glutin_window"] = [{"text":"impl !Send for GlutinWindow","synthetic":true,"types":[]}];
implementors["graphics"] = [{"text":"impl Send for DrawState","synthetic":true,"types":[]},{"text":"impl Send for Blend","synthetic":true,"types":[]},{"text":"impl Send for Stencil","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Character&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Polygon","synthetic":true,"types":[]},{"text":"impl Send for Line","synthetic":true,"types":[]},{"text":"impl Send for Shape","synthetic":true,"types":[]},{"text":"impl Send for CircleArc","synthetic":true,"types":[]},{"text":"impl Send for Border","synthetic":true,"types":[]},{"text":"impl Send for Ellipse","synthetic":true,"types":[]},{"text":"impl Send for Border","synthetic":true,"types":[]},{"text":"impl Send for Rectangle","synthetic":true,"types":[]},{"text":"impl Send for Shape","synthetic":true,"types":[]},{"text":"impl Send for Image","synthetic":true,"types":[]},{"text":"impl Send for Text","synthetic":true,"types":[]},{"text":"impl Send for Grid","synthetic":true,"types":[]},{"text":"impl Send for GridCells","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; Send for GlyphCache&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TexturePacker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedGraphicsApiError","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; Send for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Send for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Send for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ColorType","synthetic":true,"types":[]},{"text":"impl Send for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl Send for ImageFormat","synthetic":true,"types":[]},{"text":"impl Send for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Send for DynamicImage","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Send for EncodingError","synthetic":true,"types":[]},{"text":"impl Send for ParameterError","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for LimitError","synthetic":true,"types":[]},{"text":"impl Send for ImageError","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Send for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Rect","synthetic":true,"types":[]},{"text":"impl Send for NeuQuant","synthetic":true,"types":[]},{"text":"impl Send for FilterType","synthetic":true,"types":[]},{"text":"impl Send for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Send for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Send for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Send for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BmpDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for BmpEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DdsDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DxtDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DxtReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DxtEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DXTVariant","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FarbfeldReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FarbfeldDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for FarbfeldEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GifDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GifReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GifEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HdrAdapter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HdrReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HdrDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Rgbe8Pixel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HdrImageDecoderIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HdrMetadata","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for HdrEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IcoDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for IcoEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for JpegEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PixelDensity","synthetic":true,"types":[]},{"text":"impl Send for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CompressionType","synthetic":true,"types":[]},{"text":"impl Send for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PnmDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for PnmEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ArbitraryHeader","synthetic":true,"types":[]},{"text":"impl Send for BitmapHeader","synthetic":true,"types":[]},{"text":"impl Send for GraymapHeader","synthetic":true,"types":[]},{"text":"impl Send for PixmapHeader","synthetic":true,"types":[]},{"text":"impl Send for PnmHeader","synthetic":true,"types":[]},{"text":"impl Send for ArbitraryTuplType","synthetic":true,"types":[]},{"text":"impl Send for PNMSubtype","synthetic":true,"types":[]},{"text":"impl Send for SampleEncoding","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for TgaDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for TgaEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for TiffDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for TiffReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for WebPDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Vp8Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["input"] = [{"text":"impl Send for AfterRenderArgs","synthetic":true,"types":[]},{"text":"impl Send for CloseArgs","synthetic":true,"types":[]},{"text":"impl Send for IdleArgs","synthetic":true,"types":[]},{"text":"impl Send for ButtonArgs","synthetic":true,"types":[]},{"text":"impl Send for ResizeArgs","synthetic":true,"types":[]},{"text":"impl Send for RenderArgs","synthetic":true,"types":[]},{"text":"impl Send for TouchArgs","synthetic":true,"types":[]},{"text":"impl Send for UpdateArgs","synthetic":true,"types":[]},{"text":"impl Send for ButtonState","synthetic":true,"types":[]},{"text":"impl Send for Touch","synthetic":true,"types":[]},{"text":"impl Send for Button","synthetic":true,"types":[]},{"text":"impl Send for Motion","synthetic":true,"types":[]},{"text":"impl Send for HatState","synthetic":true,"types":[]},{"text":"impl Send for FileDrag","synthetic":true,"types":[]},{"text":"impl Send for Input","synthetic":true,"types":[]},{"text":"impl Send for Loop","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ControllerButton","synthetic":true,"types":[]},{"text":"impl Send for ControllerHat","synthetic":true,"types":[]},{"text":"impl Send for ControllerAxisArgs","synthetic":true,"types":[]},{"text":"impl Send for ModifierKey","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for MouseButton","synthetic":true,"types":[]},{"text":"impl Send for EventId","synthetic":true,"types":[]}];
implementors["interpolation"] = [{"text":"impl Send for EaseFunction","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ImageInfo","synthetic":true,"types":[]},{"text":"impl Send for PixelFormat","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for mach_timebase_info","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl !Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for fstore_t","synthetic":true,"types":[]},{"text":"impl Send for radvisory","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for kevent64_s","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for if_msghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl !Send for sf_hdtr","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for proc_taskinfo","synthetic":true,"types":[]},{"text":"impl Send for proc_bsdinfo","synthetic":true,"types":[]},{"text":"impl Send for proc_taskallinfo","synthetic":true,"types":[]},{"text":"impl Send for xsw_usage","synthetic":true,"types":[]},{"text":"impl Send for xucred","synthetic":true,"types":[]},{"text":"impl Send for mach_header","synthetic":true,"types":[]},{"text":"impl Send for mach_header_64","synthetic":true,"types":[]},{"text":"impl Send for segment_command","synthetic":true,"types":[]},{"text":"impl Send for segment_command_64","synthetic":true,"types":[]},{"text":"impl Send for load_command","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_dl","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_inarp","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ctl","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl !Send for sa_endpoints_t","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for kevent","synthetic":true,"types":[]},{"text":"impl Send for semid_ds","synthetic":true,"types":[]},{"text":"impl !Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for proc_threadinfo","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for timeval32","synthetic":true,"types":[]},{"text":"impl Send for if_data","synthetic":true,"types":[]},{"text":"impl Send for bpf_hdr","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for __darwin_mcontext64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_exception_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_thread_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_float_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_mmst_reg","synthetic":true,"types":[]},{"text":"impl Send for __darwin_xmm_reg","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl !Send for semun","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; !Send for MallocBuffer&lt;T&gt;","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Send for StreamResult","synthetic":true,"types":[]},{"text":"impl Send for MZFlush","synthetic":true,"types":[]},{"text":"impl Send for MZStatus","synthetic":true,"types":[]},{"text":"impl Send for MZError","synthetic":true,"types":[]},{"text":"impl Send for DataFormat","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Send for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Send for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Send for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Send for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Send for MinReset","synthetic":true,"types":[]},{"text":"impl Send for ZeroReset","synthetic":true,"types":[]},{"text":"impl Send for FullReset","synthetic":true,"types":[]},{"text":"impl Send for InflateState","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Send for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Send for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]}];
implementors["objc"] = [{"text":"impl !Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for MessageError","synthetic":true,"types":[]},{"text":"impl Send for Ivar","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for Object","synthetic":true,"types":[]},{"text":"impl !Send for ClassDecl","synthetic":true,"types":[]},{"text":"impl !Send for ProtocolDecl","synthetic":true,"types":[]},{"text":"impl !Send for StrongPtr","synthetic":true,"types":[]},{"text":"impl !Send for WeakPtr","synthetic":true,"types":[]},{"text":"impl Send for Sel","synthetic":false,"types":[]}];
implementors["opengl_graphics"] = [{"text":"impl Send for Colored","synthetic":true,"types":[]},{"text":"impl Send for Textured","synthetic":true,"types":[]},{"text":"impl Send for GlGraphics","synthetic":true,"types":[]},{"text":"impl Send for Texture","synthetic":true,"types":[]},{"text":"impl Send for DynamicAttribute","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for ShaderUniform&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SUFloat","synthetic":true,"types":[]},{"text":"impl Send for SUInt","synthetic":true,"types":[]},{"text":"impl Send for SUVec2","synthetic":true,"types":[]},{"text":"impl Send for SUVec3","synthetic":true,"types":[]},{"text":"impl Send for SUVec4","synthetic":true,"types":[]},{"text":"impl Send for SUMat2x2","synthetic":true,"types":[]},{"text":"impl Send for SUMat3x3","synthetic":true,"types":[]},{"text":"impl Send for SUMat4x4","synthetic":true,"types":[]}];
implementors["owned_ttf_parser"] = [{"text":"impl Send for OwnedFont","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Send for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Send for FrameControl","synthetic":true,"types":[]},{"text":"impl Send for AnimationControl","synthetic":true,"types":[]},{"text":"impl Send for Info","synthetic":true,"types":[]},{"text":"impl Send for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for OutputInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for StreamWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColorType","synthetic":true,"types":[]},{"text":"impl Send for BitDepth","synthetic":true,"types":[]},{"text":"impl Send for Unit","synthetic":true,"types":[]},{"text":"impl Send for DisposeOp","synthetic":true,"types":[]},{"text":"impl Send for BlendOp","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for Decoded","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for EncodingError","synthetic":true,"types":[]},{"text":"impl Send for FilterType","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl !Send for RawWindowHandle","synthetic":true,"types":[]},{"text":"impl !Send for MacOSHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Chain&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Chunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Copied&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FlattenIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Send for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MaxLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MinLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Send for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Send for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PanicFuse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatN&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Send for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for ZipEq&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StepBy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Send for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Send for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Configuration","synthetic":true,"types":[]},{"text":"impl !Send for FnContext","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N&gt; Send for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Send for Glyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Send for HMetrics","synthetic":true,"types":[]},{"text":"impl Send for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Send for ScaledGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Send for PositionedGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Send for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'b, I&gt; Send for GlyphIter&lt;'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, 's&gt; Send for LayoutIter&lt;'font, 's&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Font&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl Send for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; Send for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shader_version"] = [{"text":"impl&lt;'a, V, S:&nbsp;?Sized&gt; Send for Shaders&lt;'a, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseOpenGLError","synthetic":true,"types":[]},{"text":"impl Send for OpenGL","synthetic":true,"types":[]},{"text":"impl Send for ParseGLSLError","synthetic":true,"types":[]},{"text":"impl Send for GLSL","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["texture"] = [{"text":"impl Send for TextureSettings","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Wrap","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl Send for InflateError","synthetic":true,"types":[]},{"text":"impl Send for TiffError","synthetic":true,"types":[]},{"text":"impl Send for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Send for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Send for ColorType","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Rational","synthetic":true,"types":[]},{"text":"impl Send for SRational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for DirectoryEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Send for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Gray8","synthetic":true,"types":[]},{"text":"impl Send for Gray16","synthetic":true,"types":[]},{"text":"impl Send for Gray32","synthetic":true,"types":[]},{"text":"impl Send for Gray32Float","synthetic":true,"types":[]},{"text":"impl Send for Gray64","synthetic":true,"types":[]},{"text":"impl Send for Gray64Float","synthetic":true,"types":[]},{"text":"impl Send for RGB8","synthetic":true,"types":[]},{"text":"impl Send for RGB16","synthetic":true,"types":[]},{"text":"impl Send for RGB32","synthetic":true,"types":[]},{"text":"impl Send for RGB32Float","synthetic":true,"types":[]},{"text":"impl Send for RGB64","synthetic":true,"types":[]},{"text":"impl Send for RGB64Float","synthetic":true,"types":[]},{"text":"impl Send for RGBA8","synthetic":true,"types":[]},{"text":"impl Send for RGBA16","synthetic":true,"types":[]},{"text":"impl Send for RGBA32","synthetic":true,"types":[]},{"text":"impl Send for RGBA32Float","synthetic":true,"types":[]},{"text":"impl Send for RGBA64","synthetic":true,"types":[]},{"text":"impl Send for RGBA64Float","synthetic":true,"types":[]},{"text":"impl Send for CMYK8","synthetic":true,"types":[]},{"text":"impl Send for CMYK16","synthetic":true,"types":[]},{"text":"impl Send for CMYK32","synthetic":true,"types":[]},{"text":"impl Send for CMYK32Float","synthetic":true,"types":[]},{"text":"impl Send for CMYK64","synthetic":true,"types":[]},{"text":"impl Send for CMYK64Float","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Send for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Send for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Send for Predictor","synthetic":true,"types":[]},{"text":"impl Send for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl Send for SampleFormat","synthetic":true,"types":[]}];
implementors["ttf_parser"] = [{"text":"impl&lt;'a&gt; Send for VariationAxes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for VariationAxis","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Names&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ScriptMetrics","synthetic":true,"types":[]},{"text":"impl Send for GlyphId","synthetic":true,"types":[]},{"text":"impl Send for Variation","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for LineMetrics","synthetic":true,"types":[]},{"text":"impl Send for Rect","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RasterGlyphImage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GlyphClass","synthetic":true,"types":[]},{"text":"impl Send for PlatformId","synthetic":true,"types":[]},{"text":"impl Send for Weight","synthetic":true,"types":[]},{"text":"impl Send for Width","synthetic":true,"types":[]},{"text":"impl Send for RasterImageFormat","synthetic":true,"types":[]},{"text":"impl Send for TableName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Subtable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Subtables&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for ValueOffset","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Machine&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["viewport"] = [{"text":"impl Send for Viewport","synthetic":true,"types":[]}];
implementors["weezl"] = [{"text":"impl Send for StreamResult","synthetic":true,"types":[]},{"text":"impl Send for BufferResult","synthetic":true,"types":[]},{"text":"impl Send for BitOrder","synthetic":true,"types":[]},{"text":"impl Send for LzwError","synthetic":true,"types":[]},{"text":"impl Send for LzwStatus","synthetic":true,"types":[]},{"text":"impl Send for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; Send for IntoStream&lt;'d, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Encoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; Send for IntoStream&lt;'d, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["window"] = [{"text":"impl Send for NoWindow","synthetic":true,"types":[]},{"text":"impl Send for Size","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WindowSettings","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl Send for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Send for Touch","synthetic":true,"types":[]},{"text":"impl Send for ModifiersState","synthetic":true,"types":[]},{"text":"impl Send for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl Send for MonitorId","synthetic":true,"types":[]},{"text":"impl Send for Icon","synthetic":true,"types":[]},{"text":"impl Send for Window","synthetic":true,"types":[]},{"text":"impl Send for WindowId","synthetic":true,"types":[]},{"text":"impl Send for DeviceId","synthetic":true,"types":[]},{"text":"impl !Send for EventsLoop","synthetic":true,"types":[]},{"text":"impl Send for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl Send for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl Send for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Send for WindowAttributes","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WindowEvent","synthetic":true,"types":[]},{"text":"impl Send for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Send for TouchPhase","synthetic":true,"types":[]},{"text":"impl Send for ElementState","synthetic":true,"types":[]},{"text":"impl Send for MouseButton","synthetic":true,"types":[]},{"text":"impl Send for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Send for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl Send for BadIcon","synthetic":true,"types":[]},{"text":"impl Send for ControlFlow","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for MouseCursor","synthetic":true,"types":[]},{"text":"impl Send for LogicalPosition","synthetic":true,"types":[]},{"text":"impl Send for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl Send for LogicalSize","synthetic":true,"types":[]},{"text":"impl Send for PhysicalSize","synthetic":true,"types":[]},{"text":"impl Send for ActivationPolicy","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()