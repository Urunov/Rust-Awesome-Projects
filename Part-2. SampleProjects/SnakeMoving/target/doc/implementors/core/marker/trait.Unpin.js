(function() {var implementors = {};
implementors["ab_glyph_rasterizer"] = [{"text":"impl Unpin for Point","synthetic":true,"types":[]},{"text":"impl Unpin for Rasterizer","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Unpin for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Unpin for RollingAdler32","synthetic":true,"types":[]}];
implementors["block"] = [{"text":"impl&lt;A, R&gt; Unpin for Block&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R&gt; Unpin for RcBlock&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R, F&gt; Unpin for ConcreteBlock&lt;A, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Unpin for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Unpin for BigEndian","synthetic":true,"types":[]},{"text":"impl Unpin for LittleEndian","synthetic":true,"types":[]}];
implementors["cocoa"] = [{"text":"impl Unpin for NSApplicationPresentationOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSWindowStyleMask","synthetic":true,"types":[]},{"text":"impl Unpin for NSWindowOrderingMode","synthetic":true,"types":[]},{"text":"impl Unpin for NSAlignmentOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSWindowCollectionBehavior","synthetic":true,"types":[]},{"text":"impl Unpin for NSWindowOcclusionState","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventSwipeTrackingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventPhase","synthetic":true,"types":[]},{"text":"impl Unpin for NSTouchPhase","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventMask","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventModifierFlags","synthetic":true,"types":[]},{"text":"impl Unpin for NSApplicationActivationPolicy","synthetic":true,"types":[]},{"text":"impl Unpin for NSApplicationActivationOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSApplicationTerminateReply","synthetic":true,"types":[]},{"text":"impl Unpin for NSWindowTitleVisibility","synthetic":true,"types":[]},{"text":"impl Unpin for NSBackingStoreType","synthetic":true,"types":[]},{"text":"impl Unpin for NSOpenGLPixelFormatAttribute","synthetic":true,"types":[]},{"text":"impl Unpin for NSOpenGLPFAOpenGLProfiles","synthetic":true,"types":[]},{"text":"impl Unpin for NSOpenGLContextParameter","synthetic":true,"types":[]},{"text":"impl Unpin for NSWindowButton","synthetic":true,"types":[]},{"text":"impl Unpin for NSBezelStyle","synthetic":true,"types":[]},{"text":"impl Unpin for NSRequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl Unpin for NSPasteboardReadingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSPasteboardWritingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventGestureAxis","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventType","synthetic":true,"types":[]},{"text":"impl Unpin for NSPointingDeviceType","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventButtonMask","synthetic":true,"types":[]},{"text":"impl Unpin for NSEventSubtype","synthetic":true,"types":[]},{"text":"impl Unpin for NSCompositingOperation","synthetic":true,"types":[]},{"text":"impl Unpin for NSImageCacheMode","synthetic":true,"types":[]},{"text":"impl Unpin for NSTIFFCompression","synthetic":true,"types":[]},{"text":"impl Unpin for NSImageLoadStatus","synthetic":true,"types":[]},{"text":"impl Unpin for NSTabViewType","synthetic":true,"types":[]},{"text":"impl Unpin for NSTabState","synthetic":true,"types":[]},{"text":"impl Unpin for NSPoint","synthetic":true,"types":[]},{"text":"impl Unpin for NSSize","synthetic":true,"types":[]},{"text":"impl Unpin for NSRect","synthetic":true,"types":[]},{"text":"impl Unpin for NSRange","synthetic":true,"types":[]},{"text":"impl Unpin for NSEnumerationOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSFastIterator","synthetic":true,"types":[]},{"text":"impl Unpin for NSDataReadingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSDataBase64EncodingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSDataBase64DecodingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSDataWritingOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSDataSearchOptions","synthetic":true,"types":[]},{"text":"impl Unpin for NSRectEdge","synthetic":true,"types":[]},{"text":"impl Unpin for NSComparisonResult","synthetic":true,"types":[]},{"text":"impl Unpin for CALayer","synthetic":true,"types":[]},{"text":"impl Unpin for EdgeAntialiasingMask","synthetic":true,"types":[]},{"text":"impl Unpin for CornerMask","synthetic":true,"types":[]},{"text":"impl Unpin for AutoresizingMask","synthetic":true,"types":[]},{"text":"impl Unpin for CARenderer","synthetic":true,"types":[]},{"text":"impl Unpin for CATransform3D","synthetic":true,"types":[]},{"text":"impl Unpin for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl Unpin for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl Unpin for ContentsGravity","synthetic":true,"types":[]},{"text":"impl Unpin for ContentsFormat","synthetic":true,"types":[]},{"text":"impl Unpin for Filter","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl Unpin for NeuQuant","synthetic":true,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;T&gt; Unpin for CFArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for CFArrayIterator&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CFAttributedString","synthetic":true,"types":[]},{"text":"impl Unpin for CFMutableAttributedString","synthetic":true,"types":[]},{"text":"impl Unpin for CFType","synthetic":true,"types":[]},{"text":"impl Unpin for CFAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for ItemRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for ItemMutRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CFBoolean","synthetic":true,"types":[]},{"text":"impl Unpin for CFData","synthetic":true,"types":[]},{"text":"impl Unpin for CFDate","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for CFDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for CFMutableDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CFError","synthetic":true,"types":[]},{"text":"impl Unpin for CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl Unpin for CFNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for CFSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CFString","synthetic":true,"types":[]},{"text":"impl Unpin for CFURL","synthetic":true,"types":[]},{"text":"impl Unpin for CFBundle","synthetic":true,"types":[]},{"text":"impl Unpin for CFPropertyList","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoop","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl Unpin for CFTimeZone","synthetic":true,"types":[]},{"text":"impl Unpin for CFUUID","synthetic":true,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl Unpin for CFArrayCallBacks","synthetic":true,"types":[]},{"text":"impl Unpin for __CFArray","synthetic":true,"types":[]},{"text":"impl Unpin for __CFAttributedString","synthetic":true,"types":[]},{"text":"impl Unpin for CFRange","synthetic":true,"types":[]},{"text":"impl Unpin for CFAllocatorContext","synthetic":true,"types":[]},{"text":"impl Unpin for CFComparisonResult","synthetic":true,"types":[]},{"text":"impl Unpin for __CFBundle","synthetic":true,"types":[]},{"text":"impl Unpin for __CFData","synthetic":true,"types":[]},{"text":"impl Unpin for __CFDate","synthetic":true,"types":[]},{"text":"impl Unpin for CFDictionaryKeyCallBacks","synthetic":true,"types":[]},{"text":"impl Unpin for CFDictionaryValueCallBacks","synthetic":true,"types":[]},{"text":"impl Unpin for __CFDictionary","synthetic":true,"types":[]},{"text":"impl Unpin for __CFError","synthetic":true,"types":[]},{"text":"impl Unpin for __CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl Unpin for CFFileDescriptorContext","synthetic":true,"types":[]},{"text":"impl Unpin for CFMessagePortContext","synthetic":true,"types":[]},{"text":"impl Unpin for __CFMessagePort","synthetic":true,"types":[]},{"text":"impl Unpin for __CFBoolean","synthetic":true,"types":[]},{"text":"impl Unpin for __CFNumber","synthetic":true,"types":[]},{"text":"impl Unpin for __CFRunLoop","synthetic":true,"types":[]},{"text":"impl Unpin for __CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl Unpin for __CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopSourceContext","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopSourceContext1","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopObserverContext","synthetic":true,"types":[]},{"text":"impl Unpin for CFRunLoopTimerContext","synthetic":true,"types":[]},{"text":"impl Unpin for __CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl Unpin for CFSetCallBacks","synthetic":true,"types":[]},{"text":"impl Unpin for __CFSet","synthetic":true,"types":[]},{"text":"impl Unpin for __CFString","synthetic":true,"types":[]},{"text":"impl Unpin for __CFTimeZone","synthetic":true,"types":[]},{"text":"impl Unpin for __CFURL","synthetic":true,"types":[]},{"text":"impl Unpin for __CFUUID","synthetic":true,"types":[]},{"text":"impl Unpin for CFUUIDBytes","synthetic":true,"types":[]}];
implementors["core_graphics"] = [{"text":"impl Unpin for CGColor","synthetic":true,"types":[]},{"text":"impl Unpin for CGColorSpace","synthetic":true,"types":[]},{"text":"impl Unpin for CGColorSpaceRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGContext","synthetic":true,"types":[]},{"text":"impl Unpin for CGContextRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGBlendMode","synthetic":true,"types":[]},{"text":"impl Unpin for CGTextDrawingMode","synthetic":true,"types":[]},{"text":"impl Unpin for CGDataProvider","synthetic":true,"types":[]},{"text":"impl Unpin for CGDataProviderRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGDisplay","synthetic":true,"types":[]},{"text":"impl Unpin for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl Unpin for CGDisplayModeRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGConfigureOption","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventFlags","synthetic":true,"types":[]},{"text":"impl Unpin for KeyCode","synthetic":true,"types":[]},{"text":"impl Unpin for ScrollEventUnit","synthetic":true,"types":[]},{"text":"impl Unpin for EventField","synthetic":true,"types":[]},{"text":"impl Unpin for CGEvent","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventType","synthetic":true,"types":[]},{"text":"impl Unpin for CGMouseButton","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventTapLocation","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventSource","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventSourceRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGEventSourceStateID","synthetic":true,"types":[]},{"text":"impl Unpin for CGFont","synthetic":true,"types":[]},{"text":"impl Unpin for CGFontRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGSize","synthetic":true,"types":[]},{"text":"impl Unpin for CGPoint","synthetic":true,"types":[]},{"text":"impl Unpin for CGRect","synthetic":true,"types":[]},{"text":"impl Unpin for CGAffineTransform","synthetic":true,"types":[]},{"text":"impl Unpin for CGSRegion","synthetic":true,"types":[]},{"text":"impl Unpin for CGSSurface","synthetic":true,"types":[]},{"text":"impl Unpin for CGImage","synthetic":true,"types":[]},{"text":"impl Unpin for CGImageRef","synthetic":true,"types":[]},{"text":"impl Unpin for CGImageAlphaInfo","synthetic":true,"types":[]},{"text":"impl Unpin for CGImageByteOrderInfo","synthetic":true,"types":[]},{"text":"impl Unpin for CGPath","synthetic":true,"types":[]},{"text":"impl Unpin for CGPathRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for CGPathElementRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CGPathElement","synthetic":true,"types":[]},{"text":"impl Unpin for CGPathElementType","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Unpin for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Unpin for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Unpin for TryReadyError","synthetic":true,"types":[]},{"text":"impl Unpin for TrySelectError","synthetic":true,"types":[]},{"text":"impl Unpin for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Unpin for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Unpin for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; Unpin for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; Unpin for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Collector","synthetic":true,"types":[]},{"text":"impl Unpin for LocalHandle","synthetic":true,"types":[]},{"text":"impl Unpin for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Unpin for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for AtomicCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Parker","synthetic":true,"types":[]},{"text":"impl Unpin for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for ShardedLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Unpin for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Unpin for ScopedThreadBuilder&lt;'scope, 'env&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'env: 'scope,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Unpin for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["deflate"] = [{"text":"impl Unpin for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Unpin for Compression","synthetic":true,"types":[]},{"text":"impl Unpin for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Unpin for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Unpin for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["event_loop"] = [{"text":"impl Unpin for EventSettings","synthetic":true,"types":[]},{"text":"impl Unpin for Events","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Unpin for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl Unpin for Opaque","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl Unpin for AnyExtension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Unpin for DecodingFormatError","synthetic":true,"types":[]},{"text":"impl Unpin for MemoryLimit","synthetic":true,"types":[]},{"text":"impl Unpin for DecodeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Block","synthetic":true,"types":[]},{"text":"impl Unpin for Extension","synthetic":true,"types":[]},{"text":"impl Unpin for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DecodingError","synthetic":true,"types":[]},{"text":"impl Unpin for ColorOutput","synthetic":true,"types":[]},{"text":"impl Unpin for Extensions","synthetic":true,"types":[]},{"text":"impl Unpin for ExtensionData","synthetic":true,"types":[]},{"text":"impl Unpin for Repeat","synthetic":true,"types":[]},{"text":"impl Unpin for EncodingError","synthetic":true,"types":[]}];
implementors["gl"] = [{"text":"impl Unpin for FnPtr","synthetic":true,"types":[]},{"text":"impl Unpin for __GLsync","synthetic":true,"types":[]},{"text":"impl Unpin for _cl_context","synthetic":true,"types":[]},{"text":"impl Unpin for _cl_event","synthetic":true,"types":[]}];
implementors["gleam"] = [{"text":"impl Unpin for FnPtr","synthetic":true,"types":[]},{"text":"impl Unpin for Gl","synthetic":true,"types":[]},{"text":"impl Unpin for Gles2","synthetic":true,"types":[]},{"text":"impl Unpin for DebugMessage","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorCheckingGl","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for ErrorReactingGl&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for ProfilingGl&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for GlFns","synthetic":true,"types":[]},{"text":"impl Unpin for GlesFns","synthetic":true,"types":[]},{"text":"impl Unpin for __GLsync","synthetic":true,"types":[]},{"text":"impl Unpin for _cl_context","synthetic":true,"types":[]},{"text":"impl Unpin for _cl_event","synthetic":true,"types":[]},{"text":"impl Unpin for GlType","synthetic":true,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T&gt; Unpin for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; Unpin for ContextWrapper&lt;T, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for ContextBuilder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PixelFormat","synthetic":true,"types":[]},{"text":"impl Unpin for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NotCurrent","synthetic":true,"types":[]},{"text":"impl Unpin for CreationError","synthetic":true,"types":[]},{"text":"impl Unpin for ContextError","synthetic":true,"types":[]},{"text":"impl Unpin for Api","synthetic":true,"types":[]},{"text":"impl Unpin for GlProfile","synthetic":true,"types":[]},{"text":"impl Unpin for GlRequest","synthetic":true,"types":[]},{"text":"impl Unpin for Robustness","synthetic":true,"types":[]},{"text":"impl Unpin for ReleaseBehavior","synthetic":true,"types":[]}];
implementors["glutin_window"] = [{"text":"impl Unpin for GlutinWindow","synthetic":true,"types":[]}];
implementors["graphics"] = [{"text":"impl Unpin for DrawState","synthetic":true,"types":[]},{"text":"impl Unpin for Blend","synthetic":true,"types":[]},{"text":"impl Unpin for Stencil","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Character&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Context","synthetic":true,"types":[]},{"text":"impl Unpin for Polygon","synthetic":true,"types":[]},{"text":"impl Unpin for Line","synthetic":true,"types":[]},{"text":"impl Unpin for Shape","synthetic":true,"types":[]},{"text":"impl Unpin for CircleArc","synthetic":true,"types":[]},{"text":"impl Unpin for Border","synthetic":true,"types":[]},{"text":"impl Unpin for Ellipse","synthetic":true,"types":[]},{"text":"impl Unpin for Border","synthetic":true,"types":[]},{"text":"impl Unpin for Rectangle","synthetic":true,"types":[]},{"text":"impl Unpin for Shape","synthetic":true,"types":[]},{"text":"impl Unpin for Image","synthetic":true,"types":[]},{"text":"impl Unpin for Text","synthetic":true,"types":[]},{"text":"impl Unpin for Grid","synthetic":true,"types":[]},{"text":"impl Unpin for GridCells","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; Unpin for GlyphCache&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TexturePacker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl Unpin for Version","synthetic":true,"types":[]},{"text":"impl Unpin for UnsupportedGraphicsApiError","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; Unpin for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Unpin for Pixels&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Unpin for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Delay","synthetic":true,"types":[]},{"text":"impl Unpin for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ColorType","synthetic":true,"types":[]},{"text":"impl Unpin for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl Unpin for ImageFormat","synthetic":true,"types":[]},{"text":"impl Unpin for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Unpin for DynamicImage","synthetic":true,"types":[]},{"text":"impl Unpin for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Unpin for EncodingError","synthetic":true,"types":[]},{"text":"impl Unpin for ParameterError","synthetic":true,"types":[]},{"text":"impl Unpin for DecodingError","synthetic":true,"types":[]},{"text":"impl Unpin for LimitError","synthetic":true,"types":[]},{"text":"impl Unpin for ImageError","synthetic":true,"types":[]},{"text":"impl Unpin for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for EnumeratePixels&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for EnumeratePixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for EnumerateRows&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for EnumerateRowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for Pixels&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for PixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for Rows&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Unpin for RowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Rect","synthetic":true,"types":[]},{"text":"impl Unpin for NeuQuant","synthetic":true,"types":[]},{"text":"impl Unpin for FilterType","synthetic":true,"types":[]},{"text":"impl Unpin for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Unpin for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Unpin for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Unpin for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for BmpDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for BmpEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DdsDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DxtDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DxtReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for DxtEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DXTVariant","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for FarbfeldReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for FarbfeldDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for FarbfeldEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for GifDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for GifReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for GifEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for HdrAdapter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for HdrReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for HdrDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Rgbe8Pixel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for HdrImageDecoderIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for HdrMetadata","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for HdrEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for IcoDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for IcoEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for JpegEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PixelDensity","synthetic":true,"types":[]},{"text":"impl Unpin for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionType","synthetic":true,"types":[]},{"text":"impl Unpin for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for PnmDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for PnmEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ArbitraryHeader","synthetic":true,"types":[]},{"text":"impl Unpin for BitmapHeader","synthetic":true,"types":[]},{"text":"impl Unpin for GraymapHeader","synthetic":true,"types":[]},{"text":"impl Unpin for PixmapHeader","synthetic":true,"types":[]},{"text":"impl Unpin for PnmHeader","synthetic":true,"types":[]},{"text":"impl Unpin for ArbitraryTuplType","synthetic":true,"types":[]},{"text":"impl Unpin for PNMSubtype","synthetic":true,"types":[]},{"text":"impl Unpin for SampleEncoding","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for TgaDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for TgaEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for TiffDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for TiffReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for WebPDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Vp8Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["input"] = [{"text":"impl Unpin for AfterRenderArgs","synthetic":true,"types":[]},{"text":"impl Unpin for CloseArgs","synthetic":true,"types":[]},{"text":"impl Unpin for IdleArgs","synthetic":true,"types":[]},{"text":"impl Unpin for ButtonArgs","synthetic":true,"types":[]},{"text":"impl Unpin for ResizeArgs","synthetic":true,"types":[]},{"text":"impl Unpin for RenderArgs","synthetic":true,"types":[]},{"text":"impl Unpin for TouchArgs","synthetic":true,"types":[]},{"text":"impl Unpin for UpdateArgs","synthetic":true,"types":[]},{"text":"impl Unpin for ButtonState","synthetic":true,"types":[]},{"text":"impl Unpin for Touch","synthetic":true,"types":[]},{"text":"impl Unpin for Button","synthetic":true,"types":[]},{"text":"impl Unpin for Motion","synthetic":true,"types":[]},{"text":"impl Unpin for HatState","synthetic":true,"types":[]},{"text":"impl Unpin for FileDrag","synthetic":true,"types":[]},{"text":"impl Unpin for Input","synthetic":true,"types":[]},{"text":"impl Unpin for Loop","synthetic":true,"types":[]},{"text":"impl Unpin for Event","synthetic":true,"types":[]},{"text":"impl Unpin for ControllerButton","synthetic":true,"types":[]},{"text":"impl Unpin for ControllerHat","synthetic":true,"types":[]},{"text":"impl Unpin for ControllerAxisArgs","synthetic":true,"types":[]},{"text":"impl Unpin for ModifierKey","synthetic":true,"types":[]},{"text":"impl Unpin for Key","synthetic":true,"types":[]},{"text":"impl Unpin for MouseButton","synthetic":true,"types":[]},{"text":"impl Unpin for EventId","synthetic":true,"types":[]}];
implementors["interpolation"] = [{"text":"impl Unpin for EaseFunction","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; Unpin for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ImageInfo","synthetic":true,"types":[]},{"text":"impl Unpin for PixelFormat","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Unpin for group","synthetic":true,"types":[]},{"text":"impl Unpin for utimbuf","synthetic":true,"types":[]},{"text":"impl Unpin for timeval","synthetic":true,"types":[]},{"text":"impl Unpin for timespec","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit","synthetic":true,"types":[]},{"text":"impl Unpin for rusage","synthetic":true,"types":[]},{"text":"impl Unpin for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for hostent","synthetic":true,"types":[]},{"text":"impl Unpin for iovec","synthetic":true,"types":[]},{"text":"impl Unpin for pollfd","synthetic":true,"types":[]},{"text":"impl Unpin for winsize","synthetic":true,"types":[]},{"text":"impl Unpin for linger","synthetic":true,"types":[]},{"text":"impl Unpin for sigval","synthetic":true,"types":[]},{"text":"impl Unpin for itimerval","synthetic":true,"types":[]},{"text":"impl Unpin for tms","synthetic":true,"types":[]},{"text":"impl Unpin for servent","synthetic":true,"types":[]},{"text":"impl Unpin for protoent","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Unpin for passwd","synthetic":true,"types":[]},{"text":"impl Unpin for ifaddrs","synthetic":true,"types":[]},{"text":"impl Unpin for fd_set","synthetic":true,"types":[]},{"text":"impl Unpin for tm","synthetic":true,"types":[]},{"text":"impl Unpin for msghdr","synthetic":true,"types":[]},{"text":"impl Unpin for cmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for fsid_t","synthetic":true,"types":[]},{"text":"impl Unpin for if_nameindex","synthetic":true,"types":[]},{"text":"impl Unpin for regex_t","synthetic":true,"types":[]},{"text":"impl Unpin for regmatch_t","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Unpin for utsname","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for aiocb","synthetic":true,"types":[]},{"text":"impl Unpin for glob_t","synthetic":true,"types":[]},{"text":"impl Unpin for addrinfo","synthetic":true,"types":[]},{"text":"impl Unpin for mach_timebase_info","synthetic":true,"types":[]},{"text":"impl Unpin for stat","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for siginfo_t","synthetic":true,"types":[]},{"text":"impl Unpin for sigaction","synthetic":true,"types":[]},{"text":"impl Unpin for stack_t","synthetic":true,"types":[]},{"text":"impl Unpin for fstore_t","synthetic":true,"types":[]},{"text":"impl Unpin for radvisory","synthetic":true,"types":[]},{"text":"impl Unpin for statvfs","synthetic":true,"types":[]},{"text":"impl Unpin for Dl_info","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Unpin for kevent64_s","synthetic":true,"types":[]},{"text":"impl Unpin for dqblk","synthetic":true,"types":[]},{"text":"impl Unpin for if_msghdr","synthetic":true,"types":[]},{"text":"impl Unpin for termios","synthetic":true,"types":[]},{"text":"impl Unpin for flock","synthetic":true,"types":[]},{"text":"impl Unpin for sf_hdtr","synthetic":true,"types":[]},{"text":"impl Unpin for lconv","synthetic":true,"types":[]},{"text":"impl Unpin for proc_taskinfo","synthetic":true,"types":[]},{"text":"impl Unpin for proc_bsdinfo","synthetic":true,"types":[]},{"text":"impl Unpin for proc_taskallinfo","synthetic":true,"types":[]},{"text":"impl Unpin for xsw_usage","synthetic":true,"types":[]},{"text":"impl Unpin for xucred","synthetic":true,"types":[]},{"text":"impl Unpin for mach_header","synthetic":true,"types":[]},{"text":"impl Unpin for mach_header_64","synthetic":true,"types":[]},{"text":"impl Unpin for segment_command","synthetic":true,"types":[]},{"text":"impl Unpin for segment_command_64","synthetic":true,"types":[]},{"text":"impl Unpin for load_command","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_dl","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_inarp","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_ctl","synthetic":true,"types":[]},{"text":"impl Unpin for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for ipc_perm","synthetic":true,"types":[]},{"text":"impl Unpin for sembuf","synthetic":true,"types":[]},{"text":"impl Unpin for arphdr","synthetic":true,"types":[]},{"text":"impl Unpin for in_addr","synthetic":true,"types":[]},{"text":"impl Unpin for sa_endpoints_t","synthetic":true,"types":[]},{"text":"impl Unpin for timex","synthetic":true,"types":[]},{"text":"impl Unpin for ntptimeval","synthetic":true,"types":[]},{"text":"impl Unpin for kevent","synthetic":true,"types":[]},{"text":"impl Unpin for semid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for shmid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for proc_threadinfo","synthetic":true,"types":[]},{"text":"impl Unpin for statfs","synthetic":true,"types":[]},{"text":"impl Unpin for dirent","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Unpin for utmpx","synthetic":true,"types":[]},{"text":"impl Unpin for sigevent","synthetic":true,"types":[]},{"text":"impl Unpin for timeval32","synthetic":true,"types":[]},{"text":"impl Unpin for if_data","synthetic":true,"types":[]},{"text":"impl Unpin for bpf_hdr","synthetic":true,"types":[]},{"text":"impl Unpin for ucontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for __darwin_mcontext64","synthetic":true,"types":[]},{"text":"impl Unpin for __darwin_x86_exception_state64","synthetic":true,"types":[]},{"text":"impl Unpin for __darwin_x86_thread_state64","synthetic":true,"types":[]},{"text":"impl Unpin for __darwin_x86_float_state64","synthetic":true,"types":[]},{"text":"impl Unpin for __darwin_mmst_reg","synthetic":true,"types":[]},{"text":"impl Unpin for __darwin_xmm_reg","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Unpin for max_align_t","synthetic":true,"types":[]},{"text":"impl Unpin for in6_addr","synthetic":true,"types":[]},{"text":"impl Unpin for semun","synthetic":true,"types":[]},{"text":"impl Unpin for DIR","synthetic":true,"types":[]},{"text":"impl Unpin for FILE","synthetic":true,"types":[]},{"text":"impl Unpin for fpos_t","synthetic":true,"types":[]},{"text":"impl Unpin for timezone","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Unpin for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for LevelFilter","synthetic":true,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; Unpin for MallocBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Unpin for StreamResult","synthetic":true,"types":[]},{"text":"impl Unpin for MZFlush","synthetic":true,"types":[]},{"text":"impl Unpin for MZStatus","synthetic":true,"types":[]},{"text":"impl Unpin for MZError","synthetic":true,"types":[]},{"text":"impl Unpin for DataFormat","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Unpin for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Unpin for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Unpin for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Unpin for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Unpin for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Unpin for MinReset","synthetic":true,"types":[]},{"text":"impl Unpin for ZeroReset","synthetic":true,"types":[]},{"text":"impl Unpin for FullReset","synthetic":true,"types":[]},{"text":"impl Unpin for InflateState","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Unpin for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Unpin for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Unpin for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Unpin for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Unpin for FloatErrorKind","synthetic":true,"types":[]}];
implementors["objc"] = [{"text":"impl Unpin for Encoding","synthetic":true,"types":[]},{"text":"impl Unpin for MessageError","synthetic":true,"types":[]},{"text":"impl Unpin for Sel","synthetic":true,"types":[]},{"text":"impl Unpin for Ivar","synthetic":true,"types":[]},{"text":"impl Unpin for Method","synthetic":true,"types":[]},{"text":"impl Unpin for Class","synthetic":true,"types":[]},{"text":"impl Unpin for Protocol","synthetic":true,"types":[]},{"text":"impl Unpin for Object","synthetic":true,"types":[]},{"text":"impl Unpin for ClassDecl","synthetic":true,"types":[]},{"text":"impl Unpin for ProtocolDecl","synthetic":true,"types":[]},{"text":"impl Unpin for StrongPtr","synthetic":true,"types":[]},{"text":"impl Unpin for WeakPtr","synthetic":true,"types":[]}];
implementors["opengl_graphics"] = [{"text":"impl Unpin for Colored","synthetic":true,"types":[]},{"text":"impl Unpin for Textured","synthetic":true,"types":[]},{"text":"impl Unpin for GlGraphics","synthetic":true,"types":[]},{"text":"impl Unpin for Texture","synthetic":true,"types":[]},{"text":"impl Unpin for DynamicAttribute","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for ShaderUniform&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SUFloat","synthetic":true,"types":[]},{"text":"impl Unpin for SUInt","synthetic":true,"types":[]},{"text":"impl Unpin for SUVec2","synthetic":true,"types":[]},{"text":"impl Unpin for SUVec3","synthetic":true,"types":[]},{"text":"impl Unpin for SUVec4","synthetic":true,"types":[]},{"text":"impl Unpin for SUMat2x2","synthetic":true,"types":[]},{"text":"impl Unpin for SUMat3x3","synthetic":true,"types":[]},{"text":"impl Unpin for SUMat4x4","synthetic":true,"types":[]}];
implementors["owned_ttf_parser"] = [{"text":"impl Unpin for OwnedFont","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Unpin for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Unpin for FrameControl","synthetic":true,"types":[]},{"text":"impl Unpin for AnimationControl","synthetic":true,"types":[]},{"text":"impl Unpin for Info","synthetic":true,"types":[]},{"text":"impl Unpin for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Limits","synthetic":true,"types":[]},{"text":"impl Unpin for OutputInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for StreamWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ColorType","synthetic":true,"types":[]},{"text":"impl Unpin for BitDepth","synthetic":true,"types":[]},{"text":"impl Unpin for Unit","synthetic":true,"types":[]},{"text":"impl Unpin for DisposeOp","synthetic":true,"types":[]},{"text":"impl Unpin for BlendOp","synthetic":true,"types":[]},{"text":"impl Unpin for Compression","synthetic":true,"types":[]},{"text":"impl Unpin for Decoded","synthetic":true,"types":[]},{"text":"impl Unpin for DecodingError","synthetic":true,"types":[]},{"text":"impl Unpin for EncodingError","synthetic":true,"types":[]},{"text":"impl Unpin for FilterType","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Unpin for TokenStream","synthetic":true,"types":[]},{"text":"impl Unpin for LexError","synthetic":true,"types":[]},{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for Punct","synthetic":true,"types":[]},{"text":"impl Unpin for Ident","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]},{"text":"impl Unpin for TokenTree","synthetic":true,"types":[]},{"text":"impl Unpin for Delimiter","synthetic":true,"types":[]},{"text":"impl Unpin for Spacing","synthetic":true,"types":[]},{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl Unpin for RawWindowHandle","synthetic":true,"types":[]},{"text":"impl Unpin for MacOSHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Unpin for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Unpin for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Unpin for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Unpin for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Unpin for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Unpin for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Unpin for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Unpin for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Unpin for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Unpin for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Unpin for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Unpin for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Unpin for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadPool","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Configuration","synthetic":true,"types":[]},{"text":"impl Unpin for FnContext","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N&gt; Unpin for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Unpin for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Unpin for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Unpin for Glyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for HMetrics","synthetic":true,"types":[]},{"text":"impl Unpin for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Unpin for ScaledGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Unpin for PositionedGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'b, I&gt; Unpin for GlyphIter&lt;'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, 's&gt; Unpin for LayoutIter&lt;'font, 's&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Font&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl Unpin for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; Unpin for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Unpin for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Always","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Unpin for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Unpin for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Unpin for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Unpin for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shader_version"] = [{"text":"impl&lt;'a, V, S:&nbsp;?Sized&gt; Unpin for Shaders&lt;'a, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseOpenGLError","synthetic":true,"types":[]},{"text":"impl Unpin for OpenGL","synthetic":true,"types":[]},{"text":"impl Unpin for ParseGLSLError","synthetic":true,"types":[]},{"text":"impl Unpin for GLSL","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Unpin for Attribute","synthetic":true,"types":[]},{"text":"impl Unpin for MetaList","synthetic":true,"types":[]},{"text":"impl Unpin for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for VisCrate","synthetic":true,"types":[]},{"text":"impl Unpin for VisPublic","synthetic":true,"types":[]},{"text":"impl Unpin for VisRestricted","synthetic":true,"types":[]},{"text":"impl Unpin for ExprArray","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssign","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAsync","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAwait","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBinary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBox","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBreak","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCast","synthetic":true,"types":[]},{"text":"impl Unpin for ExprClosure","synthetic":true,"types":[]},{"text":"impl Unpin for ExprContinue","synthetic":true,"types":[]},{"text":"impl Unpin for ExprField","synthetic":true,"types":[]},{"text":"impl Unpin for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprGroup","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIf","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIndex","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLet","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLit","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMacro","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMatch","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprParen","synthetic":true,"types":[]},{"text":"impl Unpin for ExprPath","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRange","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReference","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReturn","synthetic":true,"types":[]},{"text":"impl Unpin for ExprStruct","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTry","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTuple","synthetic":true,"types":[]},{"text":"impl Unpin for ExprType","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Unpin for ExprWhile","synthetic":true,"types":[]},{"text":"impl Unpin for ExprYield","synthetic":true,"types":[]},{"text":"impl Unpin for Index","synthetic":true,"types":[]},{"text":"impl Unpin for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Unpin for ConstParam","synthetic":true,"types":[]},{"text":"impl Unpin for Generics","synthetic":true,"types":[]},{"text":"impl Unpin for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateEq","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateType","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBound","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParam","synthetic":true,"types":[]},{"text":"impl Unpin for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Lifetime","synthetic":true,"types":[]},{"text":"impl Unpin for LitBool","synthetic":true,"types":[]},{"text":"impl Unpin for LitByte","synthetic":true,"types":[]},{"text":"impl Unpin for LitByteStr","synthetic":true,"types":[]},{"text":"impl Unpin for LitChar","synthetic":true,"types":[]},{"text":"impl Unpin for LitFloat","synthetic":true,"types":[]},{"text":"impl Unpin for LitInt","synthetic":true,"types":[]},{"text":"impl Unpin for LitStr","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for DataEnum","synthetic":true,"types":[]},{"text":"impl Unpin for DataStruct","synthetic":true,"types":[]},{"text":"impl Unpin for DataUnion","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveInput","synthetic":true,"types":[]},{"text":"impl Unpin for Abi","synthetic":true,"types":[]},{"text":"impl Unpin for BareFnArg","synthetic":true,"types":[]},{"text":"impl Unpin for TypeArray","synthetic":true,"types":[]},{"text":"impl Unpin for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Unpin for TypeGroup","synthetic":true,"types":[]},{"text":"impl Unpin for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Unpin for TypeInfer","synthetic":true,"types":[]},{"text":"impl Unpin for TypeMacro","synthetic":true,"types":[]},{"text":"impl Unpin for TypeNever","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParen","synthetic":true,"types":[]},{"text":"impl Unpin for TypePath","synthetic":true,"types":[]},{"text":"impl Unpin for TypePtr","synthetic":true,"types":[]},{"text":"impl Unpin for TypeReference","synthetic":true,"types":[]},{"text":"impl Unpin for TypeSlice","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTuple","synthetic":true,"types":[]},{"text":"impl Unpin for Variadic","synthetic":true,"types":[]},{"text":"impl Unpin for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Binding","synthetic":true,"types":[]},{"text":"impl Unpin for Constraint","synthetic":true,"types":[]},{"text":"impl Unpin for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Path","synthetic":true,"types":[]},{"text":"impl Unpin for PathSegment","synthetic":true,"types":[]},{"text":"impl Unpin for QSelf","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for AttrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Meta","synthetic":true,"types":[]},{"text":"impl Unpin for NestedMeta","synthetic":true,"types":[]},{"text":"impl Unpin for Fields","synthetic":true,"types":[]},{"text":"impl Unpin for Visibility","synthetic":true,"types":[]},{"text":"impl Unpin for Expr","synthetic":true,"types":[]},{"text":"impl Unpin for Member","synthetic":true,"types":[]},{"text":"impl Unpin for GenericParam","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Unpin for WherePredicate","synthetic":true,"types":[]},{"text":"impl Unpin for Lit","synthetic":true,"types":[]},{"text":"impl Unpin for StrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Unpin for Data","synthetic":true,"types":[]},{"text":"impl Unpin for BinOp","synthetic":true,"types":[]},{"text":"impl Unpin for UnOp","synthetic":true,"types":[]},{"text":"impl Unpin for ReturnType","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for GenericArgument","synthetic":true,"types":[]},{"text":"impl Unpin for PathArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Underscore","synthetic":true,"types":[]},{"text":"impl Unpin for Abstract","synthetic":true,"types":[]},{"text":"impl Unpin for As","synthetic":true,"types":[]},{"text":"impl Unpin for Async","synthetic":true,"types":[]},{"text":"impl Unpin for Auto","synthetic":true,"types":[]},{"text":"impl Unpin for Await","synthetic":true,"types":[]},{"text":"impl Unpin for Become","synthetic":true,"types":[]},{"text":"impl Unpin for Box","synthetic":true,"types":[]},{"text":"impl Unpin for Break","synthetic":true,"types":[]},{"text":"impl Unpin for Const","synthetic":true,"types":[]},{"text":"impl Unpin for Continue","synthetic":true,"types":[]},{"text":"impl Unpin for Crate","synthetic":true,"types":[]},{"text":"impl Unpin for Default","synthetic":true,"types":[]},{"text":"impl Unpin for Do","synthetic":true,"types":[]},{"text":"impl Unpin for Dyn","synthetic":true,"types":[]},{"text":"impl Unpin for Else","synthetic":true,"types":[]},{"text":"impl Unpin for Enum","synthetic":true,"types":[]},{"text":"impl Unpin for Extern","synthetic":true,"types":[]},{"text":"impl Unpin for Final","synthetic":true,"types":[]},{"text":"impl Unpin for Fn","synthetic":true,"types":[]},{"text":"impl Unpin for For","synthetic":true,"types":[]},{"text":"impl Unpin for If","synthetic":true,"types":[]},{"text":"impl Unpin for Impl","synthetic":true,"types":[]},{"text":"impl Unpin for In","synthetic":true,"types":[]},{"text":"impl Unpin for Let","synthetic":true,"types":[]},{"text":"impl Unpin for Loop","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for Match","synthetic":true,"types":[]},{"text":"impl Unpin for Mod","synthetic":true,"types":[]},{"text":"impl Unpin for Move","synthetic":true,"types":[]},{"text":"impl Unpin for Mut","synthetic":true,"types":[]},{"text":"impl Unpin for Override","synthetic":true,"types":[]},{"text":"impl Unpin for Priv","synthetic":true,"types":[]},{"text":"impl Unpin for Pub","synthetic":true,"types":[]},{"text":"impl Unpin for Ref","synthetic":true,"types":[]},{"text":"impl Unpin for Return","synthetic":true,"types":[]},{"text":"impl Unpin for SelfType","synthetic":true,"types":[]},{"text":"impl Unpin for SelfValue","synthetic":true,"types":[]},{"text":"impl Unpin for Static","synthetic":true,"types":[]},{"text":"impl Unpin for Struct","synthetic":true,"types":[]},{"text":"impl Unpin for Super","synthetic":true,"types":[]},{"text":"impl Unpin for Trait","synthetic":true,"types":[]},{"text":"impl Unpin for Try","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for Typeof","synthetic":true,"types":[]},{"text":"impl Unpin for Union","synthetic":true,"types":[]},{"text":"impl Unpin for Unsafe","synthetic":true,"types":[]},{"text":"impl Unpin for Unsized","synthetic":true,"types":[]},{"text":"impl Unpin for Use","synthetic":true,"types":[]},{"text":"impl Unpin for Virtual","synthetic":true,"types":[]},{"text":"impl Unpin for Where","synthetic":true,"types":[]},{"text":"impl Unpin for While","synthetic":true,"types":[]},{"text":"impl Unpin for Yield","synthetic":true,"types":[]},{"text":"impl Unpin for Add","synthetic":true,"types":[]},{"text":"impl Unpin for AddEq","synthetic":true,"types":[]},{"text":"impl Unpin for And","synthetic":true,"types":[]},{"text":"impl Unpin for AndAnd","synthetic":true,"types":[]},{"text":"impl Unpin for AndEq","synthetic":true,"types":[]},{"text":"impl Unpin for At","synthetic":true,"types":[]},{"text":"impl Unpin for Bang","synthetic":true,"types":[]},{"text":"impl Unpin for Caret","synthetic":true,"types":[]},{"text":"impl Unpin for CaretEq","synthetic":true,"types":[]},{"text":"impl Unpin for Colon","synthetic":true,"types":[]},{"text":"impl Unpin for Colon2","synthetic":true,"types":[]},{"text":"impl Unpin for Comma","synthetic":true,"types":[]},{"text":"impl Unpin for Div","synthetic":true,"types":[]},{"text":"impl Unpin for DivEq","synthetic":true,"types":[]},{"text":"impl Unpin for Dollar","synthetic":true,"types":[]},{"text":"impl Unpin for Dot","synthetic":true,"types":[]},{"text":"impl Unpin for Dot2","synthetic":true,"types":[]},{"text":"impl Unpin for Dot3","synthetic":true,"types":[]},{"text":"impl Unpin for DotDotEq","synthetic":true,"types":[]},{"text":"impl Unpin for Eq","synthetic":true,"types":[]},{"text":"impl Unpin for EqEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ge","synthetic":true,"types":[]},{"text":"impl Unpin for Gt","synthetic":true,"types":[]},{"text":"impl Unpin for Le","synthetic":true,"types":[]},{"text":"impl Unpin for Lt","synthetic":true,"types":[]},{"text":"impl Unpin for MulEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ne","synthetic":true,"types":[]},{"text":"impl Unpin for Or","synthetic":true,"types":[]},{"text":"impl Unpin for OrEq","synthetic":true,"types":[]},{"text":"impl Unpin for OrOr","synthetic":true,"types":[]},{"text":"impl Unpin for Pound","synthetic":true,"types":[]},{"text":"impl Unpin for Question","synthetic":true,"types":[]},{"text":"impl Unpin for RArrow","synthetic":true,"types":[]},{"text":"impl Unpin for LArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Rem","synthetic":true,"types":[]},{"text":"impl Unpin for RemEq","synthetic":true,"types":[]},{"text":"impl Unpin for FatArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Semi","synthetic":true,"types":[]},{"text":"impl Unpin for Shl","synthetic":true,"types":[]},{"text":"impl Unpin for ShlEq","synthetic":true,"types":[]},{"text":"impl Unpin for Shr","synthetic":true,"types":[]},{"text":"impl Unpin for ShrEq","synthetic":true,"types":[]},{"text":"impl Unpin for Star","synthetic":true,"types":[]},{"text":"impl Unpin for Sub","synthetic":true,"types":[]},{"text":"impl Unpin for SubEq","synthetic":true,"types":[]},{"text":"impl Unpin for Tilde","synthetic":true,"types":[]},{"text":"impl Unpin for Brace","synthetic":true,"types":[]},{"text":"impl Unpin for Bracket","synthetic":true,"types":[]},{"text":"impl Unpin for Paren","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Unpin for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Nothing","synthetic":true,"types":[]}];
implementors["texture"] = [{"text":"impl Unpin for TextureSettings","synthetic":true,"types":[]},{"text":"impl Unpin for Format","synthetic":true,"types":[]},{"text":"impl Unpin for Filter","synthetic":true,"types":[]},{"text":"impl Unpin for Wrap","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl Unpin for InflateError","synthetic":true,"types":[]},{"text":"impl Unpin for TiffError","synthetic":true,"types":[]},{"text":"impl Unpin for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Unpin for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Unpin for ColorType","synthetic":true,"types":[]},{"text":"impl Unpin for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Entry","synthetic":true,"types":[]},{"text":"impl Unpin for Value","synthetic":true,"types":[]},{"text":"impl Unpin for Rational","synthetic":true,"types":[]},{"text":"impl Unpin for SRational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for DirectoryEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Unpin for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Gray8","synthetic":true,"types":[]},{"text":"impl Unpin for Gray16","synthetic":true,"types":[]},{"text":"impl Unpin for Gray32","synthetic":true,"types":[]},{"text":"impl Unpin for Gray32Float","synthetic":true,"types":[]},{"text":"impl Unpin for Gray64","synthetic":true,"types":[]},{"text":"impl Unpin for Gray64Float","synthetic":true,"types":[]},{"text":"impl Unpin for RGB8","synthetic":true,"types":[]},{"text":"impl Unpin for RGB16","synthetic":true,"types":[]},{"text":"impl Unpin for RGB32","synthetic":true,"types":[]},{"text":"impl Unpin for RGB32Float","synthetic":true,"types":[]},{"text":"impl Unpin for RGB64","synthetic":true,"types":[]},{"text":"impl Unpin for RGB64Float","synthetic":true,"types":[]},{"text":"impl Unpin for RGBA8","synthetic":true,"types":[]},{"text":"impl Unpin for RGBA16","synthetic":true,"types":[]},{"text":"impl Unpin for RGBA32","synthetic":true,"types":[]},{"text":"impl Unpin for RGBA32Float","synthetic":true,"types":[]},{"text":"impl Unpin for RGBA64","synthetic":true,"types":[]},{"text":"impl Unpin for RGBA64Float","synthetic":true,"types":[]},{"text":"impl Unpin for CMYK8","synthetic":true,"types":[]},{"text":"impl Unpin for CMYK16","synthetic":true,"types":[]},{"text":"impl Unpin for CMYK32","synthetic":true,"types":[]},{"text":"impl Unpin for CMYK32Float","synthetic":true,"types":[]},{"text":"impl Unpin for CMYK64","synthetic":true,"types":[]},{"text":"impl Unpin for CMYK64Float","synthetic":true,"types":[]},{"text":"impl Unpin for Tag","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Unpin for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Unpin for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Unpin for Predictor","synthetic":true,"types":[]},{"text":"impl Unpin for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl Unpin for SampleFormat","synthetic":true,"types":[]}];
implementors["ttf_parser"] = [{"text":"impl&lt;'a&gt; Unpin for VariationAxes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for VariationAxis","synthetic":true,"types":[]},{"text":"impl Unpin for Class","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Names&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ScriptMetrics","synthetic":true,"types":[]},{"text":"impl Unpin for GlyphId","synthetic":true,"types":[]},{"text":"impl Unpin for Variation","synthetic":true,"types":[]},{"text":"impl Unpin for Tag","synthetic":true,"types":[]},{"text":"impl Unpin for LineMetrics","synthetic":true,"types":[]},{"text":"impl Unpin for Rect","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RasterGlyphImage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GlyphClass","synthetic":true,"types":[]},{"text":"impl Unpin for PlatformId","synthetic":true,"types":[]},{"text":"impl Unpin for Weight","synthetic":true,"types":[]},{"text":"impl Unpin for Width","synthetic":true,"types":[]},{"text":"impl Unpin for RasterImageFormat","synthetic":true,"types":[]},{"text":"impl Unpin for TableName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Subtable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Subtables&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl Unpin for ValueOffset","synthetic":true,"types":[]},{"text":"impl Unpin for Entry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Machine&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["viewport"] = [{"text":"impl Unpin for Viewport","synthetic":true,"types":[]}];
implementors["weezl"] = [{"text":"impl Unpin for StreamResult","synthetic":true,"types":[]},{"text":"impl Unpin for BufferResult","synthetic":true,"types":[]},{"text":"impl Unpin for BitOrder","synthetic":true,"types":[]},{"text":"impl Unpin for LzwError","synthetic":true,"types":[]},{"text":"impl Unpin for LzwStatus","synthetic":true,"types":[]},{"text":"impl Unpin for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; Unpin for IntoStream&lt;'d, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Encoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; Unpin for IntoStream&lt;'d, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["window"] = [{"text":"impl Unpin for NoWindow","synthetic":true,"types":[]},{"text":"impl Unpin for Size","synthetic":true,"types":[]},{"text":"impl Unpin for Position","synthetic":true,"types":[]},{"text":"impl Unpin for WindowSettings","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl Unpin for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Unpin for Touch","synthetic":true,"types":[]},{"text":"impl Unpin for ModifiersState","synthetic":true,"types":[]},{"text":"impl Unpin for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl Unpin for MonitorId","synthetic":true,"types":[]},{"text":"impl Unpin for Icon","synthetic":true,"types":[]},{"text":"impl Unpin for Window","synthetic":true,"types":[]},{"text":"impl Unpin for WindowId","synthetic":true,"types":[]},{"text":"impl Unpin for DeviceId","synthetic":true,"types":[]},{"text":"impl Unpin for EventsLoop","synthetic":true,"types":[]},{"text":"impl Unpin for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl Unpin for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl Unpin for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for WindowAttributes","synthetic":true,"types":[]},{"text":"impl Unpin for Event","synthetic":true,"types":[]},{"text":"impl Unpin for WindowEvent","synthetic":true,"types":[]},{"text":"impl Unpin for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Unpin for TouchPhase","synthetic":true,"types":[]},{"text":"impl Unpin for ElementState","synthetic":true,"types":[]},{"text":"impl Unpin for MouseButton","synthetic":true,"types":[]},{"text":"impl Unpin for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Unpin for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl Unpin for BadIcon","synthetic":true,"types":[]},{"text":"impl Unpin for ControlFlow","synthetic":true,"types":[]},{"text":"impl Unpin for CreationError","synthetic":true,"types":[]},{"text":"impl Unpin for MouseCursor","synthetic":true,"types":[]},{"text":"impl Unpin for LogicalPosition","synthetic":true,"types":[]},{"text":"impl Unpin for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl Unpin for LogicalSize","synthetic":true,"types":[]},{"text":"impl Unpin for PhysicalSize","synthetic":true,"types":[]},{"text":"impl Unpin for ActivationPolicy","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()