(function() {var implementors = {};
implementors["ab_glyph_rasterizer"] = [{"text":"impl Clone for Point","synthetic":false,"types":[]}];
implementors["adler"] = [{"text":"impl Clone for Adler32","synthetic":false,"types":[]}];
implementors["adler32"] = [{"text":"impl Clone for RollingAdler32","synthetic":false,"types":[]}];
implementors["block"] = [{"text":"impl&lt;A, R&gt; Clone for RcBlock&lt;A, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, R, F&gt; Clone for ConcreteBlock&lt;A, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Clone for PodCastError","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["cocoa"] = [{"text":"impl Clone for NSApplicationActivationPolicy","synthetic":false,"types":[]},{"text":"impl Clone for NSApplicationActivationOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSApplicationTerminateReply","synthetic":false,"types":[]},{"text":"impl Clone for NSApplicationPresentationOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSWindowStyleMask","synthetic":false,"types":[]},{"text":"impl Clone for NSWindowTitleVisibility","synthetic":false,"types":[]},{"text":"impl Clone for NSBackingStoreType","synthetic":false,"types":[]},{"text":"impl Clone for NSWindowOrderingMode","synthetic":false,"types":[]},{"text":"impl Clone for NSAlignmentOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSOpenGLPixelFormatAttribute","synthetic":false,"types":[]},{"text":"impl Clone for NSOpenGLPFAOpenGLProfiles","synthetic":false,"types":[]},{"text":"impl Clone for NSOpenGLContextParameter","synthetic":false,"types":[]},{"text":"impl Clone for NSWindowButton","synthetic":false,"types":[]},{"text":"impl Clone for NSBezelStyle","synthetic":false,"types":[]},{"text":"impl Clone for NSRequestUserAttentionType","synthetic":false,"types":[]},{"text":"impl Clone for NSPasteboardReadingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSPasteboardWritingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSWindowCollectionBehavior","synthetic":false,"types":[]},{"text":"impl Clone for NSWindowOcclusionState","synthetic":false,"types":[]},{"text":"impl Clone for NSEventSwipeTrackingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSEventPhase","synthetic":false,"types":[]},{"text":"impl Clone for NSTouchPhase","synthetic":false,"types":[]},{"text":"impl Clone for NSEventType","synthetic":false,"types":[]},{"text":"impl Clone for NSEventMask","synthetic":false,"types":[]},{"text":"impl Clone for NSEventModifierFlags","synthetic":false,"types":[]},{"text":"impl Clone for NSCompositingOperation","synthetic":false,"types":[]},{"text":"impl Clone for NSImageCacheMode","synthetic":false,"types":[]},{"text":"impl Clone for NSTIFFCompression","synthetic":false,"types":[]},{"text":"impl Clone for NSImageLoadStatus","synthetic":false,"types":[]},{"text":"impl Clone for NSPoint","synthetic":false,"types":[]},{"text":"impl Clone for NSSize","synthetic":false,"types":[]},{"text":"impl Clone for NSRect","synthetic":false,"types":[]},{"text":"impl Clone for NSEnumerationOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSComparisonResult","synthetic":false,"types":[]},{"text":"impl Clone for NSDataReadingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSDataBase64EncodingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSDataBase64DecodingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSDataWritingOptions","synthetic":false,"types":[]},{"text":"impl Clone for NSDataSearchOptions","synthetic":false,"types":[]},{"text":"impl Clone for CALayer","synthetic":false,"types":[]},{"text":"impl Clone for ContentsGravity","synthetic":false,"types":[]},{"text":"impl Clone for ContentsFormat","synthetic":false,"types":[]},{"text":"impl Clone for Filter","synthetic":false,"types":[]},{"text":"impl Clone for EdgeAntialiasingMask","synthetic":false,"types":[]},{"text":"impl Clone for CornerMask","synthetic":false,"types":[]},{"text":"impl Clone for AutoresizingMask","synthetic":false,"types":[]},{"text":"impl Clone for CARenderer","synthetic":false,"types":[]},{"text":"impl Clone for CATransform3D","synthetic":false,"types":[]},{"text":"impl Clone for CVTimeStamp","synthetic":false,"types":[]},{"text":"impl Clone for CVSMPTETime","synthetic":false,"types":[]}];
implementors["core_foundation"] = [{"text":"impl Clone for CFArray","synthetic":false,"types":[]},{"text":"impl Clone for CFAttributedString","synthetic":false,"types":[]},{"text":"impl Clone for CFMutableAttributedString","synthetic":false,"types":[]},{"text":"impl Clone for CFType","synthetic":false,"types":[]},{"text":"impl Clone for CFAllocator","synthetic":false,"types":[]},{"text":"impl Clone for CFBoolean","synthetic":false,"types":[]},{"text":"impl Clone for CFData","synthetic":false,"types":[]},{"text":"impl Clone for CFDate","synthetic":false,"types":[]},{"text":"impl Clone for CFDictionary","synthetic":false,"types":[]},{"text":"impl Clone for CFMutableDictionary","synthetic":false,"types":[]},{"text":"impl Clone for CFError","synthetic":false,"types":[]},{"text":"impl Clone for CFFileDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for CFNumber","synthetic":false,"types":[]},{"text":"impl Clone for CFSet","synthetic":false,"types":[]},{"text":"impl Clone for CFString","synthetic":false,"types":[]},{"text":"impl Clone for CFURL","synthetic":false,"types":[]},{"text":"impl Clone for CFBundle","synthetic":false,"types":[]},{"text":"impl Clone for CFPropertyList","synthetic":false,"types":[]},{"text":"impl Clone for CFRunLoop","synthetic":false,"types":[]},{"text":"impl Clone for CFRunLoopTimer","synthetic":false,"types":[]},{"text":"impl Clone for CFRunLoopSource","synthetic":false,"types":[]},{"text":"impl Clone for CFRunLoopObserver","synthetic":false,"types":[]},{"text":"impl Clone for CFTimeZone","synthetic":false,"types":[]},{"text":"impl Clone for CFUUID","synthetic":false,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl Clone for CFArrayCallBacks","synthetic":false,"types":[]},{"text":"impl Clone for CFComparisonResult","synthetic":false,"types":[]},{"text":"impl Clone for CFRange","synthetic":false,"types":[]},{"text":"impl Clone for CFAllocatorContext","synthetic":false,"types":[]},{"text":"impl Clone for CFDictionaryKeyCallBacks","synthetic":false,"types":[]},{"text":"impl Clone for CFDictionaryValueCallBacks","synthetic":false,"types":[]},{"text":"impl Clone for CFFileDescriptorContext","synthetic":false,"types":[]},{"text":"impl Clone for CFMessagePortContext","synthetic":false,"types":[]},{"text":"impl Clone for CFSetCallBacks","synthetic":false,"types":[]},{"text":"impl Clone for CFUUIDBytes","synthetic":false,"types":[]}];
implementors["core_graphics"] = [{"text":"impl Clone for CGColor","synthetic":false,"types":[]},{"text":"impl Clone for CGColorSpace","synthetic":false,"types":[]},{"text":"impl Clone for CGBlendMode","synthetic":false,"types":[]},{"text":"impl Clone for CGContext","synthetic":false,"types":[]},{"text":"impl Clone for CGDataProvider","synthetic":false,"types":[]},{"text":"impl Clone for CGConfigureOption","synthetic":false,"types":[]},{"text":"impl Clone for CGDisplay","synthetic":false,"types":[]},{"text":"impl Clone for CGDisplayMode","synthetic":false,"types":[]},{"text":"impl Clone for CGEventFlags","synthetic":false,"types":[]},{"text":"impl Clone for CGEventType","synthetic":false,"types":[]},{"text":"impl Clone for CGMouseButton","synthetic":false,"types":[]},{"text":"impl Clone for CGEventTapLocation","synthetic":false,"types":[]},{"text":"impl Clone for CGEvent","synthetic":false,"types":[]},{"text":"impl Clone for CGEventSourceStateID","synthetic":false,"types":[]},{"text":"impl Clone for CGEventSource","synthetic":false,"types":[]},{"text":"impl Clone for CGFont","synthetic":false,"types":[]},{"text":"impl Clone for CGSize","synthetic":false,"types":[]},{"text":"impl Clone for CGPoint","synthetic":false,"types":[]},{"text":"impl Clone for CGRect","synthetic":false,"types":[]},{"text":"impl Clone for CGAffineTransform","synthetic":false,"types":[]},{"text":"impl Clone for CGImage","synthetic":false,"types":[]},{"text":"impl Clone for CGPath","synthetic":false,"types":[]},{"text":"impl Clone for CGPathElementType","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Clone for Hasher","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RecvError","synthetic":false,"types":[]},{"text":"impl Clone for TryRecvError","synthetic":false,"types":[]},{"text":"impl Clone for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TrySelectError","synthetic":false,"types":[]},{"text":"impl Clone for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Clone for TryReadyError","synthetic":false,"types":[]},{"text":"impl Clone for ReadyTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Clone for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Clone for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Clone for Shared&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Unparker","synthetic":false,"types":[]},{"text":"impl Clone for WaitGroup","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Clone for Compression","synthetic":false,"types":[]},{"text":"impl Clone for SpecialOptions","synthetic":false,"types":[]},{"text":"impl Clone for CompressionOptions","synthetic":false,"types":[]},{"text":"impl Clone for MatchingType","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["event_loop"] = [{"text":"impl Clone for EventSettings","synthetic":false,"types":[]},{"text":"impl Clone for Events","synthetic":false,"types":[]}];
implementors["gif"] = [{"text":"impl Clone for DisposalMethod","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for AnyExtension","synthetic":false,"types":[]},{"text":"impl Clone for Extension","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Frame&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ColorOutput","synthetic":false,"types":[]},{"text":"impl Clone for MemoryLimit","synthetic":false,"types":[]},{"text":"impl Clone for DecodeOptions","synthetic":false,"types":[]}];
implementors["gleam"] = [{"text":"impl Clone for GlType","synthetic":false,"types":[]},{"text":"impl Clone for FnPtr","synthetic":false,"types":[]},{"text":"impl Clone for Gl","synthetic":false,"types":[]},{"text":"impl Clone for Gles2","synthetic":false,"types":[]}];
implementors["glutin"] = [{"text":"impl Clone for PossiblyCurrent","synthetic":false,"types":[]},{"text":"impl Clone for NotCurrent","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + ContextCurrentState&gt; Clone for ContextBuilder&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Api","synthetic":false,"types":[]},{"text":"impl Clone for GlProfile","synthetic":false,"types":[]},{"text":"impl Clone for GlRequest","synthetic":false,"types":[]},{"text":"impl Clone for Robustness","synthetic":false,"types":[]},{"text":"impl Clone for ReleaseBehavior","synthetic":false,"types":[]},{"text":"impl Clone for PixelFormat","synthetic":false,"types":[]},{"text":"impl Clone for PixelFormatRequirements","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for GlAttributes&lt;S&gt;","synthetic":false,"types":[]}];
implementors["graphics"] = [{"text":"impl Clone for DrawState","synthetic":false,"types":[]},{"text":"impl Clone for Blend","synthetic":false,"types":[]},{"text":"impl Clone for Stencil","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + 'a + ImageSize&gt; Clone for Character&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for Polygon","synthetic":false,"types":[]},{"text":"impl Clone for Shape","synthetic":false,"types":[]},{"text":"impl Clone for Line","synthetic":false,"types":[]},{"text":"impl Clone for CircleArc","synthetic":false,"types":[]},{"text":"impl Clone for Border","synthetic":false,"types":[]},{"text":"impl Clone for Ellipse","synthetic":false,"types":[]},{"text":"impl Clone for Shape","synthetic":false,"types":[]},{"text":"impl Clone for Border","synthetic":false,"types":[]},{"text":"impl Clone for Rectangle","synthetic":false,"types":[]},{"text":"impl Clone for Image","synthetic":false,"types":[]},{"text":"impl Clone for Text","synthetic":false,"types":[]},{"text":"impl Clone for Grid","synthetic":false,"types":[]},{"text":"impl Clone for GridCells","synthetic":false,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl Clone for Version","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Clone for UnsupportedErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for ParameterErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for LimitErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for ImageFormatHint","synthetic":false,"types":[]},{"text":"impl Clone for Rect","synthetic":false,"types":[]},{"text":"impl Clone for BiLevel","synthetic":false,"types":[]},{"text":"impl Clone for FilterType","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Clone&gt; Clone for FlatSamples&lt;Buffer&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SampleLayout","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Clone, P:&nbsp;Clone + Pixel&gt; Clone for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: AsRef&lt;[P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Clone, P:&nbsp;Clone + Pixel&gt; Clone for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: AsMut&lt;[P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for NormalForm","synthetic":false,"types":[]},{"text":"impl Clone for DXTVariant","synthetic":false,"types":[]},{"text":"impl Clone for Rgbe8Pixel","synthetic":false,"types":[]},{"text":"impl Clone for HdrMetadata","synthetic":false,"types":[]},{"text":"impl Clone for PixelDensityUnit","synthetic":false,"types":[]},{"text":"impl Clone for PixelDensity","synthetic":false,"types":[]},{"text":"impl Clone for CompressionType","synthetic":false,"types":[]},{"text":"impl Clone for FilterType","synthetic":false,"types":[]},{"text":"impl Clone for SampleEncoding","synthetic":false,"types":[]},{"text":"impl Clone for PNMSubtype","synthetic":false,"types":[]},{"text":"impl Clone for BitmapHeader","synthetic":false,"types":[]},{"text":"impl Clone for GraymapHeader","synthetic":false,"types":[]},{"text":"impl Clone for PixmapHeader","synthetic":false,"types":[]},{"text":"impl Clone for ArbitraryHeader","synthetic":false,"types":[]},{"text":"impl Clone for ArbitraryTuplType","synthetic":false,"types":[]},{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for Delay","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Clone for Pixels&lt;'_, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Clone for Rows&lt;'_, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Clone for EnumeratePixels&lt;'_, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Pixel, '_&gt; Clone for EnumerateRows&lt;'_, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P, Container&gt; Clone for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Pixel,<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Deref&lt;Target = [P::Subpixel]&gt; + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ColorType","synthetic":false,"types":[]},{"text":"impl Clone for ExtendedColorType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Rgb&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Bgr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Luma&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Rgba&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Bgra&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for LumaA&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DynamicImage","synthetic":false,"types":[]},{"text":"impl Clone for ImageFormat","synthetic":false,"types":[]},{"text":"impl Clone for ImageOutputFormat","synthetic":false,"types":[]},{"text":"impl Clone for Progress","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;?Sized, '_&gt; Clone for Pixels&lt;'_, I&gt;","synthetic":false,"types":[]}];
implementors["input"] = [{"text":"impl Clone for ControllerButton","synthetic":false,"types":[]},{"text":"impl Clone for ControllerHat","synthetic":false,"types":[]},{"text":"impl Clone for ControllerAxisArgs","synthetic":false,"types":[]},{"text":"impl Clone for ModifierKey","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for MouseButton","synthetic":false,"types":[]},{"text":"impl Clone for EventId","synthetic":false,"types":[]},{"text":"impl Clone for AfterRenderArgs","synthetic":false,"types":[]},{"text":"impl Clone for ButtonState","synthetic":false,"types":[]},{"text":"impl Clone for ButtonArgs","synthetic":false,"types":[]},{"text":"impl Clone for CloseArgs","synthetic":false,"types":[]},{"text":"impl Clone for IdleArgs","synthetic":false,"types":[]},{"text":"impl Clone for RenderArgs","synthetic":false,"types":[]},{"text":"impl Clone for ResizeArgs","synthetic":false,"types":[]},{"text":"impl Clone for Touch","synthetic":false,"types":[]},{"text":"impl Clone for TouchArgs","synthetic":false,"types":[]},{"text":"impl Clone for UpdateArgs","synthetic":false,"types":[]},{"text":"impl Clone for Button","synthetic":false,"types":[]},{"text":"impl Clone for Motion","synthetic":false,"types":[]},{"text":"impl Clone for HatState","synthetic":false,"types":[]},{"text":"impl Clone for FileDrag","synthetic":false,"types":[]},{"text":"impl Clone for Input","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]}];
implementors["interpolation"] = [{"text":"impl Clone for EaseFunction","synthetic":false,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Clone for PixelFormat","synthetic":false,"types":[]},{"text":"impl Clone for ImageInfo","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for mach_timebase_info","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for fstore_t","synthetic":false,"types":[]},{"text":"impl Clone for radvisory","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for kevent64_s","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for if_msghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for sf_hdtr","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for proc_taskinfo","synthetic":false,"types":[]},{"text":"impl Clone for proc_bsdinfo","synthetic":false,"types":[]},{"text":"impl Clone for proc_taskallinfo","synthetic":false,"types":[]},{"text":"impl Clone for xsw_usage","synthetic":false,"types":[]},{"text":"impl Clone for xucred","synthetic":false,"types":[]},{"text":"impl Clone for mach_header","synthetic":false,"types":[]},{"text":"impl Clone for mach_header_64","synthetic":false,"types":[]},{"text":"impl Clone for segment_command","synthetic":false,"types":[]},{"text":"impl Clone for segment_command_64","synthetic":false,"types":[]},{"text":"impl Clone for load_command","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_dl","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_inarp","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ctl","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for sa_endpoints_t","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for kevent","synthetic":false,"types":[]},{"text":"impl Clone for semid_ds","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for proc_threadinfo","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for semun","synthetic":false,"types":[]},{"text":"impl Clone for timeval32","synthetic":false,"types":[]},{"text":"impl Clone for if_data","synthetic":false,"types":[]},{"text":"impl Clone for bpf_hdr","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for __darwin_mcontext64","synthetic":false,"types":[]},{"text":"impl Clone for __darwin_x86_exception_state64","synthetic":false,"types":[]},{"text":"impl Clone for __darwin_x86_thread_state64","synthetic":false,"types":[]},{"text":"impl Clone for __darwin_x86_float_state64","synthetic":false,"types":[]},{"text":"impl Clone for __darwin_mmst_reg","synthetic":false,"types":[]},{"text":"impl Clone for __darwin_xmm_reg","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Range&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStep&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeFrom&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepFrom&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["objc"] = [{"text":"impl Clone for Sel","synthetic":false,"types":[]},{"text":"impl Clone for StrongPtr","synthetic":false,"types":[]},{"text":"impl Clone for WeakPtr","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]}];
implementors["opengl_graphics"] = [{"text":"impl&lt;T:&nbsp;Clone + ?Sized&gt; Clone for ShaderUniform&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SUFloat","synthetic":false,"types":[]},{"text":"impl Clone for SUInt","synthetic":false,"types":[]},{"text":"impl Clone for SUVec2","synthetic":false,"types":[]},{"text":"impl Clone for SUVec3","synthetic":false,"types":[]},{"text":"impl Clone for SUVec4","synthetic":false,"types":[]},{"text":"impl Clone for SUMat2x2","synthetic":false,"types":[]},{"text":"impl Clone for SUMat3x3","synthetic":false,"types":[]},{"text":"impl Clone for SUMat4x4","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Clone for ColorType","synthetic":false,"types":[]},{"text":"impl Clone for BitDepth","synthetic":false,"types":[]},{"text":"impl Clone for PixelDimensions","synthetic":false,"types":[]},{"text":"impl Clone for Unit","synthetic":false,"types":[]},{"text":"impl Clone for DisposeOp","synthetic":false,"types":[]},{"text":"impl Clone for BlendOp","synthetic":false,"types":[]},{"text":"impl Clone for FrameControl","synthetic":false,"types":[]},{"text":"impl Clone for AnimationControl","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]},{"text":"impl Clone for Info","synthetic":false,"types":[]},{"text":"impl Clone for Transformations","synthetic":false,"types":[]},{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for FilterType","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl Clone for MacOSHandle","synthetic":false,"types":[]},{"text":"impl Clone for RawWindowHandle","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T:&nbsp;Clone + Ord + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Ord + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + Sync + 'a&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Hash + Eq + Sync, V:&nbsp;Sync&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Hash + Eq + Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ParallelIterator&lt;Item = A::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Cloned&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Copied&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Clone for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Enumerate&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for Filter&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, P:&nbsp;Clone&gt; Clone for FilterMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMap&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for FlatMapIter&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for Flatten&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for FlattenIter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Fold&lt;I, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for FoldWith&lt;I, U, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Inspect&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: IndexedParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: IndexedParallelIterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: ParallelIterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MinLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for MaxLen&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Map&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapWith&lt;I, T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, INIT:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for MapInit&lt;I, INIT, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MultiZip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for PanicFuse&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Iter:&nbsp;Clone&gt; Clone for IterBridge&lt;Iter&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator, P:&nbsp;Clone&gt; Clone for Positions&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for RepeatN&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Rev&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Skip&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Split&lt;D, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Take&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone, ID:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for TryFold&lt;I, U, ID, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, U:&nbsp;Clone + Try, F:&nbsp;Clone&gt; Clone for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Ok: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator, F:&nbsp;Clone&gt; Clone for Update&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + ParallelIterator&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for Zip&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + IndexedParallelIterator, B:&nbsp;Clone + IndexedParallelIterator&gt; Clone for ZipEq&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + IndexedParallelIterator&gt; Clone for StepBy&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Iter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Iter&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Chunks&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for ChunksExact&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Sync&gt; Clone for Windows&lt;'data, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T, P:&nbsp;Clone&gt; Clone for Split&lt;'data, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Chars&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for CharIndices&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Bytes&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for EncodeUtf16&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Split&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for SplitTerminator&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for Lines&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch&gt; Clone for SplitWhitespace&lt;'ch&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for Matches&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'ch, P:&nbsp;Clone + Pattern&gt; Clone for MatchIndices&lt;'ch, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Send&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;'a&gt; Clone for Font&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Point&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Vector&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Rect&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for GlyphId","synthetic":false,"types":[]},{"text":"impl&lt;'font&gt; Clone for Glyph&lt;'font&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HMetrics","synthetic":false,"types":[]},{"text":"impl Clone for VMetrics","synthetic":false,"types":[]},{"text":"impl&lt;'font&gt; Clone for ScaledGlyph&lt;'font&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'font&gt; Clone for PositionedGlyph&lt;'font&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Scale","synthetic":false,"types":[]},{"text":"impl&lt;'b, I:&nbsp;Clone + Iterator&gt; Clone for GlyphIter&lt;'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: IntoGlyphId,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'font, 's&gt; Clone for LayoutIter&lt;'font, 's&gt;","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["shader_version"] = [{"text":"impl Clone for OpenGL","synthetic":false,"types":[]},{"text":"impl Clone for GLSL","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["texture"] = [{"text":"impl Clone for TextureSettings","synthetic":false,"types":[]},{"text":"impl Clone for Format","synthetic":false,"types":[]},{"text":"impl Clone for Filter","synthetic":false,"types":[]},{"text":"impl Clone for Wrap","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for Rational","synthetic":false,"types":[]},{"text":"impl Clone for TiffFormatError","synthetic":false,"types":[]},{"text":"impl Clone for InflateError","synthetic":false,"types":[]},{"text":"impl Clone for TiffUnsupportedError","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for CompressionMethod","synthetic":false,"types":[]},{"text":"impl Clone for PhotometricInterpretation","synthetic":false,"types":[]},{"text":"impl Clone for PlanarConfiguration","synthetic":false,"types":[]},{"text":"impl Clone for Predictor","synthetic":false,"types":[]},{"text":"impl Clone for ResolutionUnit","synthetic":false,"types":[]},{"text":"impl Clone for SampleFormat","synthetic":false,"types":[]},{"text":"impl Clone for ColorType","synthetic":false,"types":[]}];
implementors["ttf_parser"] = [{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for VariationAxis","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariationAxes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for GlyphClass","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Subtable&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Subtables&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for State","synthetic":false,"types":[]},{"text":"impl Clone for ValueOffset","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for PlatformId","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Names&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Weight","synthetic":false,"types":[]},{"text":"impl Clone for Width","synthetic":false,"types":[]},{"text":"impl Clone for ScriptMetrics","synthetic":false,"types":[]},{"text":"impl Clone for GlyphId","synthetic":false,"types":[]},{"text":"impl Clone for Variation","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for LineMetrics","synthetic":false,"types":[]},{"text":"impl Clone for Rect","synthetic":false,"types":[]},{"text":"impl Clone for RasterImageFormat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RasterGlyphImage&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TableName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Font&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["viewport"] = [{"text":"impl Clone for Viewport","synthetic":false,"types":[]}];
implementors["weezl"] = [{"text":"impl Clone for BitOrder","synthetic":false,"types":[]},{"text":"impl Clone for LzwStatus","synthetic":false,"types":[]},{"text":"impl Clone for LzwError","synthetic":false,"types":[]}];
implementors["window"] = [{"text":"impl Clone for Size","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WindowSettings","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Clone for LogicalPosition","synthetic":false,"types":[]},{"text":"impl Clone for PhysicalPosition","synthetic":false,"types":[]},{"text":"impl Clone for LogicalSize","synthetic":false,"types":[]},{"text":"impl Clone for PhysicalSize","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for WindowEvent","synthetic":false,"types":[]},{"text":"impl Clone for DeviceEvent","synthetic":false,"types":[]},{"text":"impl Clone for KeyboardInput","synthetic":false,"types":[]},{"text":"impl Clone for TouchPhase","synthetic":false,"types":[]},{"text":"impl Clone for Touch","synthetic":false,"types":[]},{"text":"impl Clone for ElementState","synthetic":false,"types":[]},{"text":"impl Clone for MouseButton","synthetic":false,"types":[]},{"text":"impl Clone for MouseScrollDelta","synthetic":false,"types":[]},{"text":"impl Clone for VirtualKeyCode","synthetic":false,"types":[]},{"text":"impl Clone for ModifiersState","synthetic":false,"types":[]},{"text":"impl Clone for BadIcon","synthetic":false,"types":[]},{"text":"impl Clone for Icon","synthetic":false,"types":[]},{"text":"impl Clone for MonitorId","synthetic":false,"types":[]},{"text":"impl Clone for ActivationPolicy","synthetic":false,"types":[]},{"text":"impl Clone for WindowId","synthetic":false,"types":[]},{"text":"impl Clone for DeviceId","synthetic":false,"types":[]},{"text":"impl Clone for ControlFlow","synthetic":false,"types":[]},{"text":"impl Clone for EventsLoopProxy","synthetic":false,"types":[]},{"text":"impl Clone for EventsLoopClosed","synthetic":false,"types":[]},{"text":"impl Clone for WindowBuilder","synthetic":false,"types":[]},{"text":"impl Clone for CreationError","synthetic":false,"types":[]},{"text":"impl Clone for MouseCursor","synthetic":false,"types":[]},{"text":"impl Clone for WindowAttributes","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()