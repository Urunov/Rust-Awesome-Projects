(function() {var implementors = {};
implementors["ab_glyph_rasterizer"] = [{"text":"impl Sub&lt;Point&gt; for Point","synthetic":false,"types":[]}];
implementors["cocoa"] = [{"text":"impl Sub&lt;NSApplicationPresentationOptions&gt; for NSApplicationPresentationOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSWindowStyleMask&gt; for NSWindowStyleMask","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSWindowOrderingMode&gt; for NSWindowOrderingMode","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSAlignmentOptions&gt; for NSAlignmentOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSWindowCollectionBehavior&gt; for NSWindowCollectionBehavior","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSWindowOcclusionState&gt; for NSWindowOcclusionState","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSEventSwipeTrackingOptions&gt; for NSEventSwipeTrackingOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSEventPhase&gt; for NSEventPhase","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSTouchPhase&gt; for NSTouchPhase","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSEventMask&gt; for NSEventMask","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSEventModifierFlags&gt; for NSEventModifierFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSEnumerationOptions&gt; for NSEnumerationOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSDataReadingOptions&gt; for NSDataReadingOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSDataBase64EncodingOptions&gt; for NSDataBase64EncodingOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSDataBase64DecodingOptions&gt; for NSDataBase64DecodingOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSDataWritingOptions&gt; for NSDataWritingOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;NSDataSearchOptions&gt; for NSDataSearchOptions","synthetic":false,"types":[]},{"text":"impl Sub&lt;EdgeAntialiasingMask&gt; for EdgeAntialiasingMask","synthetic":false,"types":[]},{"text":"impl Sub&lt;CornerMask&gt; for CornerMask","synthetic":false,"types":[]},{"text":"impl Sub&lt;AutoresizingMask&gt; for AutoresizingMask","synthetic":false,"types":[]}];
implementors["core_graphics"] = [{"text":"impl Sub&lt;CGEventFlags&gt; for CGEventFlags","synthetic":false,"types":[]}];
implementors["input"] = [{"text":"impl Sub&lt;ModifierKey&gt; for ModifierKey","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Sub&lt;Transformations&gt; for Transformations","synthetic":false,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N:&nbsp;Sub&lt;Output = N&gt;&gt; Sub&lt;Point&lt;N&gt;&gt; for Point&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Sub&lt;Output = N&gt;&gt; Sub&lt;Vector&lt;N&gt;&gt; for Vector&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Sub&lt;Output = N&gt;&gt; Sub&lt;Vector&lt;N&gt;&gt; for Point&lt;N&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()