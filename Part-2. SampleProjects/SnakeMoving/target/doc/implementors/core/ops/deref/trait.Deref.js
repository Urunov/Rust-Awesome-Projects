(function() {var implementors = {};
implementors["block"] = [{"text":"impl&lt;A, R&gt; Deref for RcBlock&lt;A, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, R, F&gt; Deref for ConcreteBlock&lt;A, R, F&gt;","synthetic":false,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;'a, T&gt; Deref for ItemRef&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Deref for ItemMutRef&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Deref for CFData","synthetic":false,"types":[]}];
implementors["core_graphics"] = [{"text":"impl Deref for CGColorSpace","synthetic":false,"types":[]},{"text":"impl Deref for CGContext","synthetic":false,"types":[]},{"text":"impl Deref for CGDataProvider","synthetic":false,"types":[]},{"text":"impl Deref for CGDisplayMode","synthetic":false,"types":[]},{"text":"impl Deref for CGEvent","synthetic":false,"types":[]},{"text":"impl Deref for CGEventSource","synthetic":false,"types":[]},{"text":"impl Deref for CGFont","synthetic":false,"types":[]},{"text":"impl Deref for CGImage","synthetic":false,"types":[]},{"text":"impl Deref for CGPath","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Deref for CGPathElementRef&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Deref for Owned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Deref for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Deref for ShardedLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Deref for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Deref for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Deref,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Deref&lt;Target = L::Target&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T:&nbsp;ContextCurrentState, W&gt; Deref for ContextWrapper&lt;T, W&gt;","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl&lt;P, Container&gt; Deref for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Pixel + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Subpixel: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Deref&lt;Target = [P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; Deref for MallocBuffer&lt;T&gt;","synthetic":false,"types":[]}];
implementors["objc"] = [{"text":"impl Deref for StrongPtr","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Deref for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Deref for Underscore","synthetic":false,"types":[]},{"text":"impl Deref for Add","synthetic":false,"types":[]},{"text":"impl Deref for And","synthetic":false,"types":[]},{"text":"impl Deref for At","synthetic":false,"types":[]},{"text":"impl Deref for Bang","synthetic":false,"types":[]},{"text":"impl Deref for Caret","synthetic":false,"types":[]},{"text":"impl Deref for Colon","synthetic":false,"types":[]},{"text":"impl Deref for Comma","synthetic":false,"types":[]},{"text":"impl Deref for Div","synthetic":false,"types":[]},{"text":"impl Deref for Dollar","synthetic":false,"types":[]},{"text":"impl Deref for Dot","synthetic":false,"types":[]},{"text":"impl Deref for Eq","synthetic":false,"types":[]},{"text":"impl Deref for Gt","synthetic":false,"types":[]},{"text":"impl Deref for Lt","synthetic":false,"types":[]},{"text":"impl Deref for Or","synthetic":false,"types":[]},{"text":"impl Deref for Pound","synthetic":false,"types":[]},{"text":"impl Deref for Question","synthetic":false,"types":[]},{"text":"impl Deref for Rem","synthetic":false,"types":[]},{"text":"impl Deref for Semi","synthetic":false,"types":[]},{"text":"impl Deref for Star","synthetic":false,"types":[]},{"text":"impl Deref for Sub","synthetic":false,"types":[]},{"text":"impl Deref for Tilde","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Deref for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()