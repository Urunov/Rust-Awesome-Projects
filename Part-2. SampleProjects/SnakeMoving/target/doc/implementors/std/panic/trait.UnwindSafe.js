(function() {var implementors = {};
implementors["ab_glyph_rasterizer"] = [{"text":"impl UnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rasterizer","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl UnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["block"] = [{"text":"impl&lt;A, R&gt; UnwindSafe for Block&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R&gt; UnwindSafe for RcBlock&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R, F&gt; UnwindSafe for ConcreteBlock&lt;A, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["cocoa"] = [{"text":"impl UnwindSafe for NSApplicationPresentationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowStyleMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowOrderingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSAlignmentOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowCollectionBehavior","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowOcclusionState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventSwipeTrackingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTouchPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventModifierFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSApplicationActivationPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSApplicationActivationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSApplicationTerminateReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowTitleVisibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSBackingStoreType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOpenGLPixelFormatAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOpenGLPFAOpenGLProfiles","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOpenGLContextParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSBezelStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPasteboardReadingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPasteboardWritingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventGestureAxis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPointingDeviceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventButtonMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventSubtype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSCompositingOperation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSImageCacheMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTIFFCompression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSImageLoadStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTabViewType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTabState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEnumerationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSFastIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataReadingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataBase64EncodingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataBase64DecodingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataWritingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataSearchOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRectEdge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSComparisonResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CALayer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdgeAntialiasingMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CornerMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AutoresizingMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CARenderer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CATransform3D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentsGravity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filter","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl UnwindSafe for NeuQuant","synthetic":true,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;T&gt; UnwindSafe for CFArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CFArrayIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFAttributedString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFMutableAttributedString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ItemRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ItemMutRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFBoolean","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFDate","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for CFDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for CFMutableDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CFSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFURL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFPropertyList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFTimeZone","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFUUID","synthetic":true,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl UnwindSafe for CFArrayCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFAttributedString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFAllocatorContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFComparisonResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFDictionaryKeyCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFDictionaryValueCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFDictionary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFFileDescriptorContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFMessagePortContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFMessagePort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFBoolean","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFNumber","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopSourceContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopSourceContext1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopObserverContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopTimerContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFSetCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFTimeZone","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFURL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFUUID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFUUIDBytes","synthetic":true,"types":[]}];
implementors["core_graphics"] = [{"text":"impl UnwindSafe for CGColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGColorSpace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGColorSpaceRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGBlendMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGTextDrawingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDataProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDataProviderRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplayModeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGConfigureOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollEventUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGMouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventTapLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSourceRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSourceStateID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGFont","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGFontRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGRect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGAffineTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGSRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGSSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImageRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImageAlphaInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImageByteOrderInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CGPathElementRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathElementType","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; UnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; !UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl UnwindSafe for CompressionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["event_loop"] = [{"text":"impl UnwindSafe for EventSettings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl UnwindSafe for AnyExtension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingFormatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryLimit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]}];
implementors["gl"] = [{"text":"impl UnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __GLsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _cl_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _cl_event","synthetic":true,"types":[]}];
implementors["gleam"] = [{"text":"impl UnwindSafe for FnPtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gles2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugMessage","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorCheckingGl","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for ErrorReactingGl&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for ProfilingGl&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlFns","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlesFns","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __GLsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _cl_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _cl_event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlType","synthetic":true,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T&gt; UnwindSafe for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; UnwindSafe for ContextWrapper&lt;T, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ContextBuilder&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotCurrent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ContextError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Robustness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleaseBehavior","synthetic":true,"types":[]}];
implementors["glutin_window"] = [{"text":"impl !UnwindSafe for GlutinWindow","synthetic":true,"types":[]}];
implementors["graphics"] = [{"text":"impl UnwindSafe for DrawState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stencil","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Character&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Polygon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CircleArc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Border","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ellipse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Border","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GridCells","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; UnwindSafe for GlyphCache&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TexturePacker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["graphics_api_version"] = [{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedGraphicsApiError","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; UnwindSafe for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; UnwindSafe for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; UnwindSafe for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DynamicImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParameterError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ImageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for EnumeratePixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for EnumerateRowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for PixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for RowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NeuQuant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; UnwindSafe for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; UnwindSafe for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; UnwindSafe for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BmpDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for BmpEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DdsDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DxtDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DxtReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DxtEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DXTVariant","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FarbfeldReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FarbfeldDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for FarbfeldEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GifDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GifReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GifEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HdrAdapter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HdrReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HdrDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgbe8Pixel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HdrImageDecoderIterator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HdrMetadata","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for HdrEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IcoDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for IcoEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for JpegEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDensity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PnmDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PnmEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArbitraryHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitmapHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GraymapHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixmapHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PnmHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArbitraryTuplType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PNMSubtype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleEncoding","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for TgaDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for TgaEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for TiffDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for TiffReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for WebPDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Vp8Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["input"] = [{"text":"impl UnwindSafe for AfterRenderArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloseArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdleArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TouchArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Button","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Motion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HatState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileDrag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Input","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControllerButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControllerHat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControllerAxisArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifierKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventId","synthetic":true,"types":[]}];
implementors["interpolation"] = [{"text":"impl UnwindSafe for EaseFunction","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; UnwindSafe for MallocBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl UnwindSafe for StreamResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InflateState","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; UnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["objc"] = [{"text":"impl UnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ivar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrongPtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeakPtr","synthetic":true,"types":[]}];
implementors["opengl_graphics"] = [{"text":"impl UnwindSafe for Colored","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Textured","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlGraphics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DynamicAttribute","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShaderUniform&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUVec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUVec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUVec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUMat2x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUMat3x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SUMat4x4","synthetic":true,"types":[]}];
implementors["owned_ttf_parser"] = [{"text":"impl UnwindSafe for OwnedFont","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl UnwindSafe for PixelDimensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnimationControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for StreamWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitDepth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisposeOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlendOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decoded","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; UnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; UnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; UnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; UnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; UnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; !UnwindSafe for SplitMut&lt;'data, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !UnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !UnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N&gt; UnwindSafe for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; UnwindSafe for Glyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; UnwindSafe for ScaledGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; UnwindSafe for PositionedGlyph&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'b, I&gt; UnwindSafe for GlyphIter&lt;'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, 's&gt; UnwindSafe for LayoutIter&lt;'font, 's&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Font&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !UnwindSafe for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; !UnwindSafe for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shader_version"] = [{"text":"impl&lt;'a, V, S:&nbsp;?Sized&gt; UnwindSafe for Shaders&lt;'a, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseOpenGLError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenGL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseGLSLError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GLSL","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["texture"] = [{"text":"impl UnwindSafe for TextureSettings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wrap","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl UnwindSafe for InflateError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TiffError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TiffFormatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rational","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for DirectoryEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; !UnwindSafe for ImageEncoder&lt;'a, W, C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray32Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray64Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB32Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB64Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA32Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA64Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK32Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK64Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Predictor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleFormat","synthetic":true,"types":[]}];
implementors["ttf_parser"] = [{"text":"impl&lt;'a&gt; UnwindSafe for VariationAxes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariationAxis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Names&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScriptMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RasterGlyphImage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Width","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RasterImageFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Subtable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Subtables&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Machine&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["viewport"] = [{"text":"impl UnwindSafe for Viewport","synthetic":true,"types":[]}];
implementors["weezl"] = [{"text":"impl !UnwindSafe for StreamResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitOrder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LzwError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LzwStatus","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; !UnwindSafe for IntoStream&lt;'d, W&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl&lt;'d, W&gt; !UnwindSafe for IntoStream&lt;'d, W&gt;","synthetic":true,"types":[]}];
implementors["window"] = [{"text":"impl UnwindSafe for NoWindow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowSettings","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl UnwindSafe for KeyboardInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonitorId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Icon","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventsLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TouchPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElementState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BadIcon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseCursor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActivationPolicy","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()